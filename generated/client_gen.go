// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetUsageStatistics request
	GetUsageStatistics(ctx context.Context, params *GetUsageStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClassificationSchemaServicePOSTWithBody request with any body
	ClassificationSchemaServicePOSTWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ClassificationSchemaServicePOSTWithTextBody(ctx context.Context, body ClassificationSchemaServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClassificationMediaService request
	ClassificationMediaService(ctx context.Context, mediaName string, params *ClassificationMediaServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClassificationStatisticsService request
	ClassificationStatisticsService(ctx context.Context, params *ClassificationStatisticsServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClassificationSchemaService request
	ClassificationSchemaService(ctx context.Context, class string, params *ClassificationSchemaServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClassificationSchemaSubclassService request
	ClassificationSchemaSubclassService(ctx context.Context, class string, subclass string, params *ClassificationSchemaSubclassServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ClassificationMappingService request
	ClassificationMappingService(ctx context.Context, inputFormat ClassificationMappingServiceParamsInputFormat, class string, subclass string, outputFormat ClassificationMappingServiceParamsOutputFormat, params *ClassificationMappingServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// INPADOCFamilyRetrievalServicePOSTWithBody request with any body
	INPADOCFamilyRetrievalServicePOSTWithBody(ctx context.Context, pType INPADOCFamilyRetrievalServicePOSTParamsType, format INPADOCFamilyRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	INPADOCFamilyRetrievalServicePOSTWithTextBody(ctx context.Context, pType INPADOCFamilyRetrievalServicePOSTParamsType, format INPADOCFamilyRetrievalServicePOSTParamsFormat, body INPADOCFamilyRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// INPADOCFamilyRetrievalServiceWithBiblioPOSTWithBody request with any body
	INPADOCFamilyRetrievalServiceWithBiblioPOSTWithBody(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsType, format INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	INPADOCFamilyRetrievalServiceWithBiblioPOSTWithTextBody(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsType, format INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsFormat, body INPADOCFamilyRetrievalServiceWithBiblioPOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// INPADOCFamilyRetrievalServiceWithLegalPOSTWithBody request with any body
	INPADOCFamilyRetrievalServiceWithLegalPOSTWithBody(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithLegalPOSTParamsType, format INPADOCFamilyRetrievalServiceWithLegalPOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	INPADOCFamilyRetrievalServiceWithLegalPOSTWithTextBody(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithLegalPOSTParamsType, format INPADOCFamilyRetrievalServiceWithLegalPOSTParamsFormat, body INPADOCFamilyRetrievalServiceWithLegalPOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// INPADOCFamilyRetrievalService request
	INPADOCFamilyRetrievalService(ctx context.Context, pType INPADOCFamilyRetrievalServiceParamsType, format INPADOCFamilyRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// INPADOCFamilyRetrievalServiceWithBiblio request
	INPADOCFamilyRetrievalServiceWithBiblio(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithBiblioParamsType, format INPADOCFamilyRetrievalServiceWithBiblioParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// INPADOCFamilyRetrievalServiceWithLegal request
	INPADOCFamilyRetrievalServiceWithLegal(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithLegalParamsType, format INPADOCFamilyRetrievalServiceWithLegalParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LegalDataRetrievalServicePOSTWithBody request with any body
	LegalDataRetrievalServicePOSTWithBody(ctx context.Context, pType LegalDataRetrievalServicePOSTParamsType, format LegalDataRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	LegalDataRetrievalServicePOSTWithTextBody(ctx context.Context, pType LegalDataRetrievalServicePOSTParamsType, format LegalDataRetrievalServicePOSTParamsFormat, body LegalDataRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LegalDataRetrievalService request
	LegalDataRetrievalService(ctx context.Context, pType LegalDataRetrievalServiceParamsType, format LegalDataRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NumberService request
	NumberService(ctx context.Context, pType NumberServiceParamsType, inputFormat NumberServiceParamsInputFormat, number string, outputFormat NumberServiceParamsOutputFormat, reqEditors ...RequestEditorFn) (*http.Response, error)

	// NumberServicePOSTWithBody request with any body
	NumberServicePOSTWithBody(ctx context.Context, pType NumberServicePOSTParamsType, inputFormat NumberServicePOSTParamsInputFormat, outputFormat NumberServicePOSTParamsOutputFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	NumberServicePOSTWithTextBody(ctx context.Context, pType NumberServicePOSTParamsType, inputFormat NumberServicePOSTParamsInputFormat, outputFormat NumberServicePOSTParamsOutputFormat, body NumberServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedImagesRetrievalServicePOSTWithBody request with any body
	PublishedImagesRetrievalServicePOSTWithBody(ctx context.Context, params *PublishedImagesRetrievalServicePOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishedImagesRetrievalServicePOSTWithTextBody(ctx context.Context, params *PublishedImagesRetrievalServicePOSTParams, body PublishedImagesRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedImagesRetrievalService request
	PublishedImagesRetrievalService(ctx context.Context, imageCountry string, imageNumber string, imageKind string, imageType string, params *PublishedImagesRetrievalServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedDataKeywordsSearchWithoutConsituents request
	PublishedDataKeywordsSearchWithoutConsituents(ctx context.Context, params *PublishedDataKeywordsSearchWithoutConsituentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedDataKeywordsSearchWithVariableConstituents request
	PublishedDataKeywordsSearchWithVariableConstituents(ctx context.Context, constituent PublishedDataKeywordsSearchWithVariableConstituentsParamsConstituent, params *PublishedDataKeywordsSearchWithVariableConstituentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedDataAbstractServicePOSTWithBody request with any body
	PublishedDataAbstractServicePOSTWithBody(ctx context.Context, pType PublishedDataAbstractServicePOSTParamsType, format PublishedDataAbstractServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishedDataAbstractServicePOSTWithTextBody(ctx context.Context, pType PublishedDataAbstractServicePOSTParamsType, format PublishedDataAbstractServicePOSTParamsFormat, body PublishedDataAbstractServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedDataRetrievalPOSTWithBody request with any body
	PublishedDataRetrievalPOSTWithBody(ctx context.Context, pType PublishedDataRetrievalPOSTParamsType, format PublishedDataRetrievalPOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishedDataRetrievalPOSTWithTextBody(ctx context.Context, pType PublishedDataRetrievalPOSTParamsType, format PublishedDataRetrievalPOSTParamsFormat, body PublishedDataRetrievalPOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedClaimsRetrievalServicePOSTWithBody request with any body
	PublishedClaimsRetrievalServicePOSTWithBody(ctx context.Context, pType PublishedClaimsRetrievalServicePOSTParamsType, format PublishedClaimsRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishedClaimsRetrievalServicePOSTWithTextBody(ctx context.Context, pType PublishedClaimsRetrievalServicePOSTParamsType, format PublishedClaimsRetrievalServicePOSTParamsFormat, body PublishedClaimsRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedDataDescriptionRetrievalServicePOSTWithBody request with any body
	PublishedDataDescriptionRetrievalServicePOSTWithBody(ctx context.Context, pType PublishedDataDescriptionRetrievalServicePOSTParamsType, format PublishedDataDescriptionRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishedDataDescriptionRetrievalServicePOSTWithTextBody(ctx context.Context, pType PublishedDataDescriptionRetrievalServicePOSTParamsType, format PublishedDataDescriptionRetrievalServicePOSTParamsFormat, body PublishedDataDescriptionRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedEquivalentsRetrievalServicePOSTWithBody request with any body
	PublishedEquivalentsRetrievalServicePOSTWithBody(ctx context.Context, pType PublishedEquivalentsRetrievalServicePOSTParamsType, format PublishedEquivalentsRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishedEquivalentsRetrievalServicePOSTWithTextBody(ctx context.Context, pType PublishedEquivalentsRetrievalServicePOSTParamsType, format PublishedEquivalentsRetrievalServicePOSTParamsFormat, body PublishedEquivalentsRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedDataFullCycleServicePOSTWithBody request with any body
	PublishedDataFullCycleServicePOSTWithBody(ctx context.Context, pType PublishedDataFullCycleServicePOSTParamsType, format PublishedDataFullCycleServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishedDataFullCycleServicePOSTWithTextBody(ctx context.Context, pType PublishedDataFullCycleServicePOSTParamsType, format PublishedDataFullCycleServicePOSTParamsFormat, body PublishedDataFullCycleServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedDataFulltextInquiryServicePOSTWithBody request with any body
	PublishedDataFulltextInquiryServicePOSTWithBody(ctx context.Context, pType PublishedDataFulltextInquiryServicePOSTParamsType, format PublishedDataFulltextInquiryServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishedDataFulltextInquiryServicePOSTWithTextBody(ctx context.Context, pType PublishedDataFulltextInquiryServicePOSTParamsType, format PublishedDataFulltextInquiryServicePOSTParamsFormat, body PublishedDataFulltextInquiryServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedImagesInquryServicePOSTWithBody request with any body
	PublishedImagesInquryServicePOSTWithBody(ctx context.Context, pType PublishedImagesInquryServicePOSTParamsType, format PublishedImagesInquryServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PublishedImagesInquryServicePOSTWithTextBody(ctx context.Context, pType PublishedImagesInquryServicePOSTParamsType, format PublishedImagesInquryServicePOSTParamsFormat, body PublishedImagesInquryServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedDataAbstractService request
	PublishedDataAbstractService(ctx context.Context, pType PublishedDataAbstractServiceParamsType, format PublishedDataAbstractServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedDataRetrieval request
	PublishedDataRetrieval(ctx context.Context, pType PublishedDataRetrievalParamsType, format PublishedDataRetrievalParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedDataClaimsRetrievalService request
	PublishedDataClaimsRetrievalService(ctx context.Context, pType PublishedDataClaimsRetrievalServiceParamsType, format PublishedDataClaimsRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedDataDescriptionRetrievalService request
	PublishedDataDescriptionRetrievalService(ctx context.Context, pType PublishedDataDescriptionRetrievalServiceParamsType, format PublishedDataDescriptionRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedEquivalentsRetrievalService request
	PublishedEquivalentsRetrievalService(ctx context.Context, pType PublishedEquivalentsRetrievalServiceParamsType, format PublishedEquivalentsRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedDataFullCycleService request
	PublishedDataFullCycleService(ctx context.Context, pType PublishedDataFullCycleServiceParamsType, format PublishedDataFullCycleServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedDataFulltextInquiryService request
	PublishedDataFulltextInquiryService(ctx context.Context, pType PublishedDataFulltextInquiryServiceParamsType, format PublishedDataFulltextInquiryServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PublishedImagesInquiryService request
	PublishedImagesInquiryService(ctx context.Context, pType PublishedImagesInquiryServiceParamsType, format PublishedImagesInquiryServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterSearchServiceWithoutConstituents request
	RegisterSearchServiceWithoutConstituents(ctx context.Context, params *RegisterSearchServiceWithoutConstituentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterSearchServiceWithVariableConstituents request
	RegisterSearchServiceWithVariableConstituents(ctx context.Context, constituent RegisterSearchServiceWithVariableConstituentsParamsConstituent, params *RegisterSearchServiceWithVariableConstituentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterRetrievalServicePOSTWithBody request with any body
	RegisterRetrievalServicePOSTWithBody(ctx context.Context, pType RegisterRetrievalServicePOSTParamsType, format RegisterRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterRetrievalServicePOSTWithTextBody(ctx context.Context, pType RegisterRetrievalServicePOSTParamsType, format RegisterRetrievalServicePOSTParamsFormat, body RegisterRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterEventsServicePOSTWithBody request with any body
	RegisterEventsServicePOSTWithBody(ctx context.Context, pType RegisterEventsServicePOSTParamsType, format RegisterEventsServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterEventsServicePOSTWithTextBody(ctx context.Context, pType RegisterEventsServicePOSTParamsType, format RegisterEventsServicePOSTParamsFormat, body RegisterEventsServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterProceduralStepsServicePOSTWithBody request with any body
	RegisterProceduralStepsServicePOSTWithBody(ctx context.Context, pType RegisterProceduralStepsServicePOSTParamsType, format RegisterProceduralStepsServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterProceduralStepsServicePOSTWithTextBody(ctx context.Context, pType RegisterProceduralStepsServicePOSTParamsType, format RegisterProceduralStepsServicePOSTParamsFormat, body RegisterProceduralStepsServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterUNIPServicePOSTWithBody request with any body
	RegisterUNIPServicePOSTWithBody(ctx context.Context, pType RegisterUNIPServicePOSTParamsType, format RegisterUNIPServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RegisterUNIPServicePOSTWithTextBody(ctx context.Context, pType RegisterUNIPServicePOSTParamsType, format RegisterUNIPServicePOSTParamsFormat, body RegisterUNIPServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterRetrievalService request
	RegisterRetrievalService(ctx context.Context, pType RegisterRetrievalServiceParamsType, format RegisterRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterEventsService request
	RegisterEventsService(ctx context.Context, pType RegisterEventsServiceParamsType, format RegisterEventsServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterProceduralStepsService request
	RegisterProceduralStepsService(ctx context.Context, pType RegisterProceduralStepsServiceParamsType, format RegisterProceduralStepsServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RegisterUNIPService request
	RegisterUNIPService(ctx context.Context, pType RegisterUNIPServiceParamsType, format RegisterUNIPServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetUsageStatistics(ctx context.Context, params *GetUsageStatisticsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsageStatisticsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClassificationSchemaServicePOSTWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClassificationSchemaServicePOSTRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClassificationSchemaServicePOSTWithTextBody(ctx context.Context, body ClassificationSchemaServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClassificationSchemaServicePOSTRequestWithTextBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClassificationMediaService(ctx context.Context, mediaName string, params *ClassificationMediaServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClassificationMediaServiceRequest(c.Server, mediaName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClassificationStatisticsService(ctx context.Context, params *ClassificationStatisticsServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClassificationStatisticsServiceRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClassificationSchemaService(ctx context.Context, class string, params *ClassificationSchemaServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClassificationSchemaServiceRequest(c.Server, class, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClassificationSchemaSubclassService(ctx context.Context, class string, subclass string, params *ClassificationSchemaSubclassServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClassificationSchemaSubclassServiceRequest(c.Server, class, subclass, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ClassificationMappingService(ctx context.Context, inputFormat ClassificationMappingServiceParamsInputFormat, class string, subclass string, outputFormat ClassificationMappingServiceParamsOutputFormat, params *ClassificationMappingServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewClassificationMappingServiceRequest(c.Server, inputFormat, class, subclass, outputFormat, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) INPADOCFamilyRetrievalServicePOSTWithBody(ctx context.Context, pType INPADOCFamilyRetrievalServicePOSTParamsType, format INPADOCFamilyRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewINPADOCFamilyRetrievalServicePOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) INPADOCFamilyRetrievalServicePOSTWithTextBody(ctx context.Context, pType INPADOCFamilyRetrievalServicePOSTParamsType, format INPADOCFamilyRetrievalServicePOSTParamsFormat, body INPADOCFamilyRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewINPADOCFamilyRetrievalServicePOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) INPADOCFamilyRetrievalServiceWithBiblioPOSTWithBody(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsType, format INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewINPADOCFamilyRetrievalServiceWithBiblioPOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) INPADOCFamilyRetrievalServiceWithBiblioPOSTWithTextBody(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsType, format INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsFormat, body INPADOCFamilyRetrievalServiceWithBiblioPOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewINPADOCFamilyRetrievalServiceWithBiblioPOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) INPADOCFamilyRetrievalServiceWithLegalPOSTWithBody(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithLegalPOSTParamsType, format INPADOCFamilyRetrievalServiceWithLegalPOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewINPADOCFamilyRetrievalServiceWithLegalPOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) INPADOCFamilyRetrievalServiceWithLegalPOSTWithTextBody(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithLegalPOSTParamsType, format INPADOCFamilyRetrievalServiceWithLegalPOSTParamsFormat, body INPADOCFamilyRetrievalServiceWithLegalPOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewINPADOCFamilyRetrievalServiceWithLegalPOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) INPADOCFamilyRetrievalService(ctx context.Context, pType INPADOCFamilyRetrievalServiceParamsType, format INPADOCFamilyRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewINPADOCFamilyRetrievalServiceRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) INPADOCFamilyRetrievalServiceWithBiblio(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithBiblioParamsType, format INPADOCFamilyRetrievalServiceWithBiblioParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewINPADOCFamilyRetrievalServiceWithBiblioRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) INPADOCFamilyRetrievalServiceWithLegal(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithLegalParamsType, format INPADOCFamilyRetrievalServiceWithLegalParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewINPADOCFamilyRetrievalServiceWithLegalRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LegalDataRetrievalServicePOSTWithBody(ctx context.Context, pType LegalDataRetrievalServicePOSTParamsType, format LegalDataRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLegalDataRetrievalServicePOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LegalDataRetrievalServicePOSTWithTextBody(ctx context.Context, pType LegalDataRetrievalServicePOSTParamsType, format LegalDataRetrievalServicePOSTParamsFormat, body LegalDataRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLegalDataRetrievalServicePOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LegalDataRetrievalService(ctx context.Context, pType LegalDataRetrievalServiceParamsType, format LegalDataRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLegalDataRetrievalServiceRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NumberService(ctx context.Context, pType NumberServiceParamsType, inputFormat NumberServiceParamsInputFormat, number string, outputFormat NumberServiceParamsOutputFormat, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNumberServiceRequest(c.Server, pType, inputFormat, number, outputFormat)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NumberServicePOSTWithBody(ctx context.Context, pType NumberServicePOSTParamsType, inputFormat NumberServicePOSTParamsInputFormat, outputFormat NumberServicePOSTParamsOutputFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNumberServicePOSTRequestWithBody(c.Server, pType, inputFormat, outputFormat, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) NumberServicePOSTWithTextBody(ctx context.Context, pType NumberServicePOSTParamsType, inputFormat NumberServicePOSTParamsInputFormat, outputFormat NumberServicePOSTParamsOutputFormat, body NumberServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewNumberServicePOSTRequestWithTextBody(c.Server, pType, inputFormat, outputFormat, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedImagesRetrievalServicePOSTWithBody(ctx context.Context, params *PublishedImagesRetrievalServicePOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedImagesRetrievalServicePOSTRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedImagesRetrievalServicePOSTWithTextBody(ctx context.Context, params *PublishedImagesRetrievalServicePOSTParams, body PublishedImagesRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedImagesRetrievalServicePOSTRequestWithTextBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedImagesRetrievalService(ctx context.Context, imageCountry string, imageNumber string, imageKind string, imageType string, params *PublishedImagesRetrievalServiceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedImagesRetrievalServiceRequest(c.Server, imageCountry, imageNumber, imageKind, imageType, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataKeywordsSearchWithoutConsituents(ctx context.Context, params *PublishedDataKeywordsSearchWithoutConsituentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataKeywordsSearchWithoutConsituentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataKeywordsSearchWithVariableConstituents(ctx context.Context, constituent PublishedDataKeywordsSearchWithVariableConstituentsParamsConstituent, params *PublishedDataKeywordsSearchWithVariableConstituentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataKeywordsSearchWithVariableConstituentsRequest(c.Server, constituent, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataAbstractServicePOSTWithBody(ctx context.Context, pType PublishedDataAbstractServicePOSTParamsType, format PublishedDataAbstractServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataAbstractServicePOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataAbstractServicePOSTWithTextBody(ctx context.Context, pType PublishedDataAbstractServicePOSTParamsType, format PublishedDataAbstractServicePOSTParamsFormat, body PublishedDataAbstractServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataAbstractServicePOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataRetrievalPOSTWithBody(ctx context.Context, pType PublishedDataRetrievalPOSTParamsType, format PublishedDataRetrievalPOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataRetrievalPOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataRetrievalPOSTWithTextBody(ctx context.Context, pType PublishedDataRetrievalPOSTParamsType, format PublishedDataRetrievalPOSTParamsFormat, body PublishedDataRetrievalPOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataRetrievalPOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedClaimsRetrievalServicePOSTWithBody(ctx context.Context, pType PublishedClaimsRetrievalServicePOSTParamsType, format PublishedClaimsRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedClaimsRetrievalServicePOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedClaimsRetrievalServicePOSTWithTextBody(ctx context.Context, pType PublishedClaimsRetrievalServicePOSTParamsType, format PublishedClaimsRetrievalServicePOSTParamsFormat, body PublishedClaimsRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedClaimsRetrievalServicePOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataDescriptionRetrievalServicePOSTWithBody(ctx context.Context, pType PublishedDataDescriptionRetrievalServicePOSTParamsType, format PublishedDataDescriptionRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataDescriptionRetrievalServicePOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataDescriptionRetrievalServicePOSTWithTextBody(ctx context.Context, pType PublishedDataDescriptionRetrievalServicePOSTParamsType, format PublishedDataDescriptionRetrievalServicePOSTParamsFormat, body PublishedDataDescriptionRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataDescriptionRetrievalServicePOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedEquivalentsRetrievalServicePOSTWithBody(ctx context.Context, pType PublishedEquivalentsRetrievalServicePOSTParamsType, format PublishedEquivalentsRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedEquivalentsRetrievalServicePOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedEquivalentsRetrievalServicePOSTWithTextBody(ctx context.Context, pType PublishedEquivalentsRetrievalServicePOSTParamsType, format PublishedEquivalentsRetrievalServicePOSTParamsFormat, body PublishedEquivalentsRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedEquivalentsRetrievalServicePOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataFullCycleServicePOSTWithBody(ctx context.Context, pType PublishedDataFullCycleServicePOSTParamsType, format PublishedDataFullCycleServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataFullCycleServicePOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataFullCycleServicePOSTWithTextBody(ctx context.Context, pType PublishedDataFullCycleServicePOSTParamsType, format PublishedDataFullCycleServicePOSTParamsFormat, body PublishedDataFullCycleServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataFullCycleServicePOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataFulltextInquiryServicePOSTWithBody(ctx context.Context, pType PublishedDataFulltextInquiryServicePOSTParamsType, format PublishedDataFulltextInquiryServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataFulltextInquiryServicePOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataFulltextInquiryServicePOSTWithTextBody(ctx context.Context, pType PublishedDataFulltextInquiryServicePOSTParamsType, format PublishedDataFulltextInquiryServicePOSTParamsFormat, body PublishedDataFulltextInquiryServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataFulltextInquiryServicePOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedImagesInquryServicePOSTWithBody(ctx context.Context, pType PublishedImagesInquryServicePOSTParamsType, format PublishedImagesInquryServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedImagesInquryServicePOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedImagesInquryServicePOSTWithTextBody(ctx context.Context, pType PublishedImagesInquryServicePOSTParamsType, format PublishedImagesInquryServicePOSTParamsFormat, body PublishedImagesInquryServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedImagesInquryServicePOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataAbstractService(ctx context.Context, pType PublishedDataAbstractServiceParamsType, format PublishedDataAbstractServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataAbstractServiceRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataRetrieval(ctx context.Context, pType PublishedDataRetrievalParamsType, format PublishedDataRetrievalParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataRetrievalRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataClaimsRetrievalService(ctx context.Context, pType PublishedDataClaimsRetrievalServiceParamsType, format PublishedDataClaimsRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataClaimsRetrievalServiceRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataDescriptionRetrievalService(ctx context.Context, pType PublishedDataDescriptionRetrievalServiceParamsType, format PublishedDataDescriptionRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataDescriptionRetrievalServiceRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedEquivalentsRetrievalService(ctx context.Context, pType PublishedEquivalentsRetrievalServiceParamsType, format PublishedEquivalentsRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedEquivalentsRetrievalServiceRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataFullCycleService(ctx context.Context, pType PublishedDataFullCycleServiceParamsType, format PublishedDataFullCycleServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataFullCycleServiceRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedDataFulltextInquiryService(ctx context.Context, pType PublishedDataFulltextInquiryServiceParamsType, format PublishedDataFulltextInquiryServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedDataFulltextInquiryServiceRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PublishedImagesInquiryService(ctx context.Context, pType PublishedImagesInquiryServiceParamsType, format PublishedImagesInquiryServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPublishedImagesInquiryServiceRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterSearchServiceWithoutConstituents(ctx context.Context, params *RegisterSearchServiceWithoutConstituentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterSearchServiceWithoutConstituentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterSearchServiceWithVariableConstituents(ctx context.Context, constituent RegisterSearchServiceWithVariableConstituentsParamsConstituent, params *RegisterSearchServiceWithVariableConstituentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterSearchServiceWithVariableConstituentsRequest(c.Server, constituent, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterRetrievalServicePOSTWithBody(ctx context.Context, pType RegisterRetrievalServicePOSTParamsType, format RegisterRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRetrievalServicePOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterRetrievalServicePOSTWithTextBody(ctx context.Context, pType RegisterRetrievalServicePOSTParamsType, format RegisterRetrievalServicePOSTParamsFormat, body RegisterRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRetrievalServicePOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEventsServicePOSTWithBody(ctx context.Context, pType RegisterEventsServicePOSTParamsType, format RegisterEventsServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterEventsServicePOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEventsServicePOSTWithTextBody(ctx context.Context, pType RegisterEventsServicePOSTParamsType, format RegisterEventsServicePOSTParamsFormat, body RegisterEventsServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterEventsServicePOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterProceduralStepsServicePOSTWithBody(ctx context.Context, pType RegisterProceduralStepsServicePOSTParamsType, format RegisterProceduralStepsServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterProceduralStepsServicePOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterProceduralStepsServicePOSTWithTextBody(ctx context.Context, pType RegisterProceduralStepsServicePOSTParamsType, format RegisterProceduralStepsServicePOSTParamsFormat, body RegisterProceduralStepsServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterProceduralStepsServicePOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterUNIPServicePOSTWithBody(ctx context.Context, pType RegisterUNIPServicePOSTParamsType, format RegisterUNIPServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterUNIPServicePOSTRequestWithBody(c.Server, pType, format, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterUNIPServicePOSTWithTextBody(ctx context.Context, pType RegisterUNIPServicePOSTParamsType, format RegisterUNIPServicePOSTParamsFormat, body RegisterUNIPServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterUNIPServicePOSTRequestWithTextBody(c.Server, pType, format, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterRetrievalService(ctx context.Context, pType RegisterRetrievalServiceParamsType, format RegisterRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterRetrievalServiceRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterEventsService(ctx context.Context, pType RegisterEventsServiceParamsType, format RegisterEventsServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterEventsServiceRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterProceduralStepsService(ctx context.Context, pType RegisterProceduralStepsServiceParamsType, format RegisterProceduralStepsServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterProceduralStepsServiceRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RegisterUNIPService(ctx context.Context, pType RegisterUNIPServiceParamsType, format RegisterUNIPServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRegisterUNIPServiceRequest(c.Server, pType, format, number)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetUsageStatisticsRequest generates requests for GetUsageStatistics
func NewGetUsageStatisticsRequest(server string, params *GetUsageStatisticsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/../developers/me/stats/usage")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timeRange", runtime.ParamLocationQuery, params.TimeRange); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClassificationSchemaServicePOSTRequestWithTextBody calls the generic ClassificationSchemaServicePOST builder with text/plain body
func NewClassificationSchemaServicePOSTRequestWithTextBody(server string, body ClassificationSchemaServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewClassificationSchemaServicePOSTRequestWithBody(server, "text/plain", bodyReader)
}

// NewClassificationSchemaServicePOSTRequestWithBody generates requests for ClassificationSchemaServicePOST with any type of body
func NewClassificationSchemaServicePOSTRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/classification/cpc")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewClassificationMediaServiceRequest generates requests for ClassificationMediaService
func NewClassificationMediaServiceRequest(server string, mediaName string, params *ClassificationMediaServiceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "media-name", runtime.ParamLocationPath, mediaName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/classification/cpc/media/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Attachment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "attachment", runtime.ParamLocationQuery, *params.Attachment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClassificationStatisticsServiceRequest generates requests for ClassificationStatisticsService
func NewClassificationStatisticsServiceRequest(server string, params *ClassificationStatisticsServiceParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/classification/cpc/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClassificationSchemaServiceRequest generates requests for ClassificationSchemaService
func NewClassificationSchemaServiceRequest(server string, class string, params *ClassificationSchemaServiceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "class", runtime.ParamLocationPath, class)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/classification/cpc/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ancestors != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ancestors", runtime.ParamLocationQuery, *params.Ancestors); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Navigation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "navigation", runtime.ParamLocationQuery, *params.Navigation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Depth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth", runtime.ParamLocationQuery, *params.Depth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClassificationSchemaSubclassServiceRequest generates requests for ClassificationSchemaSubclassService
func NewClassificationSchemaSubclassServiceRequest(server string, class string, subclass string, params *ClassificationSchemaSubclassServiceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "class", runtime.ParamLocationPath, class)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "subclass", runtime.ParamLocationPath, subclass)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/classification/cpc/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Ancestors != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ancestors", runtime.ParamLocationQuery, *params.Ancestors); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Navigation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "navigation", runtime.ParamLocationQuery, *params.Navigation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Depth != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "depth", runtime.ParamLocationQuery, *params.Depth); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewClassificationMappingServiceRequest generates requests for ClassificationMappingService
func NewClassificationMappingServiceRequest(server string, inputFormat ClassificationMappingServiceParamsInputFormat, class string, subclass string, outputFormat ClassificationMappingServiceParamsOutputFormat, params *ClassificationMappingServiceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "input-format", runtime.ParamLocationPath, inputFormat)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "class", runtime.ParamLocationPath, class)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "subclass", runtime.ParamLocationPath, subclass)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "output-format", runtime.ParamLocationPath, outputFormat)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/classification/map/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "additional", runtime.ParamLocationQuery, params.Additional); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewINPADOCFamilyRetrievalServicePOSTRequestWithTextBody calls the generic INPADOCFamilyRetrievalServicePOST builder with text/plain body
func NewINPADOCFamilyRetrievalServicePOSTRequestWithTextBody(server string, pType INPADOCFamilyRetrievalServicePOSTParamsType, format INPADOCFamilyRetrievalServicePOSTParamsFormat, body INPADOCFamilyRetrievalServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewINPADOCFamilyRetrievalServicePOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewINPADOCFamilyRetrievalServicePOSTRequestWithBody generates requests for INPADOCFamilyRetrievalServicePOST with any type of body
func NewINPADOCFamilyRetrievalServicePOSTRequestWithBody(server string, pType INPADOCFamilyRetrievalServicePOSTParamsType, format INPADOCFamilyRetrievalServicePOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/family/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewINPADOCFamilyRetrievalServiceWithBiblioPOSTRequestWithTextBody calls the generic INPADOCFamilyRetrievalServiceWithBiblioPOST builder with text/plain body
func NewINPADOCFamilyRetrievalServiceWithBiblioPOSTRequestWithTextBody(server string, pType INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsType, format INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsFormat, body INPADOCFamilyRetrievalServiceWithBiblioPOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewINPADOCFamilyRetrievalServiceWithBiblioPOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewINPADOCFamilyRetrievalServiceWithBiblioPOSTRequestWithBody generates requests for INPADOCFamilyRetrievalServiceWithBiblioPOST with any type of body
func NewINPADOCFamilyRetrievalServiceWithBiblioPOSTRequestWithBody(server string, pType INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsType, format INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/family/%s/%s/biblio", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewINPADOCFamilyRetrievalServiceWithLegalPOSTRequestWithTextBody calls the generic INPADOCFamilyRetrievalServiceWithLegalPOST builder with text/plain body
func NewINPADOCFamilyRetrievalServiceWithLegalPOSTRequestWithTextBody(server string, pType INPADOCFamilyRetrievalServiceWithLegalPOSTParamsType, format INPADOCFamilyRetrievalServiceWithLegalPOSTParamsFormat, body INPADOCFamilyRetrievalServiceWithLegalPOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewINPADOCFamilyRetrievalServiceWithLegalPOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewINPADOCFamilyRetrievalServiceWithLegalPOSTRequestWithBody generates requests for INPADOCFamilyRetrievalServiceWithLegalPOST with any type of body
func NewINPADOCFamilyRetrievalServiceWithLegalPOSTRequestWithBody(server string, pType INPADOCFamilyRetrievalServiceWithLegalPOSTParamsType, format INPADOCFamilyRetrievalServiceWithLegalPOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/family/%s/%s/legal", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewINPADOCFamilyRetrievalServiceRequest generates requests for INPADOCFamilyRetrievalService
func NewINPADOCFamilyRetrievalServiceRequest(server string, pType INPADOCFamilyRetrievalServiceParamsType, format INPADOCFamilyRetrievalServiceParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/family/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewINPADOCFamilyRetrievalServiceWithBiblioRequest generates requests for INPADOCFamilyRetrievalServiceWithBiblio
func NewINPADOCFamilyRetrievalServiceWithBiblioRequest(server string, pType INPADOCFamilyRetrievalServiceWithBiblioParamsType, format INPADOCFamilyRetrievalServiceWithBiblioParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/family/%s/%s/%s/biblio", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewINPADOCFamilyRetrievalServiceWithLegalRequest generates requests for INPADOCFamilyRetrievalServiceWithLegal
func NewINPADOCFamilyRetrievalServiceWithLegalRequest(server string, pType INPADOCFamilyRetrievalServiceWithLegalParamsType, format INPADOCFamilyRetrievalServiceWithLegalParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/family/%s/%s/%s/legal", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLegalDataRetrievalServicePOSTRequestWithTextBody calls the generic LegalDataRetrievalServicePOST builder with text/plain body
func NewLegalDataRetrievalServicePOSTRequestWithTextBody(server string, pType LegalDataRetrievalServicePOSTParamsType, format LegalDataRetrievalServicePOSTParamsFormat, body LegalDataRetrievalServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewLegalDataRetrievalServicePOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewLegalDataRetrievalServicePOSTRequestWithBody generates requests for LegalDataRetrievalServicePOST with any type of body
func NewLegalDataRetrievalServicePOSTRequestWithBody(server string, pType LegalDataRetrievalServicePOSTParamsType, format LegalDataRetrievalServicePOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLegalDataRetrievalServiceRequest generates requests for LegalDataRetrievalService
func NewLegalDataRetrievalServiceRequest(server string, pType LegalDataRetrievalServiceParamsType, format LegalDataRetrievalServiceParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/legal/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNumberServiceRequest generates requests for NumberService
func NewNumberServiceRequest(server string, pType NumberServiceParamsType, inputFormat NumberServiceParamsInputFormat, number string, outputFormat NumberServiceParamsOutputFormat) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "input-format", runtime.ParamLocationPath, inputFormat)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "output-format", runtime.ParamLocationPath, outputFormat)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/number-service/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewNumberServicePOSTRequestWithTextBody calls the generic NumberServicePOST builder with text/plain body
func NewNumberServicePOSTRequestWithTextBody(server string, pType NumberServicePOSTParamsType, inputFormat NumberServicePOSTParamsInputFormat, outputFormat NumberServicePOSTParamsOutputFormat, body NumberServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewNumberServicePOSTRequestWithBody(server, pType, inputFormat, outputFormat, "text/plain", bodyReader)
}

// NewNumberServicePOSTRequestWithBody generates requests for NumberServicePOST with any type of body
func NewNumberServicePOSTRequestWithBody(server string, pType NumberServicePOSTParamsType, inputFormat NumberServicePOSTParamsInputFormat, outputFormat NumberServicePOSTParamsOutputFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "input-format", runtime.ParamLocationPath, inputFormat)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "output-format", runtime.ParamLocationPath, outputFormat)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/number-service/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishedImagesRetrievalServicePOSTRequestWithTextBody calls the generic PublishedImagesRetrievalServicePOST builder with text/plain body
func NewPublishedImagesRetrievalServicePOSTRequestWithTextBody(server string, params *PublishedImagesRetrievalServicePOSTParams, body PublishedImagesRetrievalServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPublishedImagesRetrievalServicePOSTRequestWithBody(server, params, "text/plain", bodyReader)
}

// NewPublishedImagesRetrievalServicePOSTRequestWithBody generates requests for PublishedImagesRetrievalServicePOST with any type of body
func NewPublishedImagesRetrievalServicePOSTRequestWithBody(server string, params *PublishedImagesRetrievalServicePOSTParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/images")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Range", runtime.ParamLocationQuery, params.Range); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishedImagesRetrievalServiceRequest generates requests for PublishedImagesRetrievalService
func NewPublishedImagesRetrievalServiceRequest(server string, imageCountry string, imageNumber string, imageKind string, imageType string, params *PublishedImagesRetrievalServiceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "image-country", runtime.ParamLocationPath, imageCountry)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "image-number", runtime.ParamLocationPath, imageNumber)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "image-kind", runtime.ParamLocationPath, imageKind)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "image-type", runtime.ParamLocationPath, imageType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/images/%s/%s/%s/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Range", runtime.ParamLocationQuery, params.Range); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishedDataKeywordsSearchWithoutConsituentsRequest generates requests for PublishedDataKeywordsSearchWithoutConsituents
func NewPublishedDataKeywordsSearchWithoutConsituentsRequest(server string, params *PublishedDataKeywordsSearchWithoutConsituentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Range != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Range", runtime.ParamLocationQuery, *params.Range); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishedDataKeywordsSearchWithVariableConstituentsRequest generates requests for PublishedDataKeywordsSearchWithVariableConstituents
func NewPublishedDataKeywordsSearchWithVariableConstituentsRequest(server string, constituent PublishedDataKeywordsSearchWithVariableConstituentsParamsConstituent, params *PublishedDataKeywordsSearchWithVariableConstituentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "constituent", runtime.ParamLocationPath, constituent)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/search/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Range != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Range", runtime.ParamLocationQuery, *params.Range); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishedDataAbstractServicePOSTRequestWithTextBody calls the generic PublishedDataAbstractServicePOST builder with text/plain body
func NewPublishedDataAbstractServicePOSTRequestWithTextBody(server string, pType PublishedDataAbstractServicePOSTParamsType, format PublishedDataAbstractServicePOSTParamsFormat, body PublishedDataAbstractServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPublishedDataAbstractServicePOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewPublishedDataAbstractServicePOSTRequestWithBody generates requests for PublishedDataAbstractServicePOST with any type of body
func NewPublishedDataAbstractServicePOSTRequestWithBody(server string, pType PublishedDataAbstractServicePOSTParamsType, format PublishedDataAbstractServicePOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/abstract", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishedDataRetrievalPOSTRequestWithTextBody calls the generic PublishedDataRetrievalPOST builder with text/plain body
func NewPublishedDataRetrievalPOSTRequestWithTextBody(server string, pType PublishedDataRetrievalPOSTParamsType, format PublishedDataRetrievalPOSTParamsFormat, body PublishedDataRetrievalPOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPublishedDataRetrievalPOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewPublishedDataRetrievalPOSTRequestWithBody generates requests for PublishedDataRetrievalPOST with any type of body
func NewPublishedDataRetrievalPOSTRequestWithBody(server string, pType PublishedDataRetrievalPOSTParamsType, format PublishedDataRetrievalPOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/biblio", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishedClaimsRetrievalServicePOSTRequestWithTextBody calls the generic PublishedClaimsRetrievalServicePOST builder with text/plain body
func NewPublishedClaimsRetrievalServicePOSTRequestWithTextBody(server string, pType PublishedClaimsRetrievalServicePOSTParamsType, format PublishedClaimsRetrievalServicePOSTParamsFormat, body PublishedClaimsRetrievalServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPublishedClaimsRetrievalServicePOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewPublishedClaimsRetrievalServicePOSTRequestWithBody generates requests for PublishedClaimsRetrievalServicePOST with any type of body
func NewPublishedClaimsRetrievalServicePOSTRequestWithBody(server string, pType PublishedClaimsRetrievalServicePOSTParamsType, format PublishedClaimsRetrievalServicePOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/claims", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishedDataDescriptionRetrievalServicePOSTRequestWithTextBody calls the generic PublishedDataDescriptionRetrievalServicePOST builder with text/plain body
func NewPublishedDataDescriptionRetrievalServicePOSTRequestWithTextBody(server string, pType PublishedDataDescriptionRetrievalServicePOSTParamsType, format PublishedDataDescriptionRetrievalServicePOSTParamsFormat, body PublishedDataDescriptionRetrievalServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPublishedDataDescriptionRetrievalServicePOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewPublishedDataDescriptionRetrievalServicePOSTRequestWithBody generates requests for PublishedDataDescriptionRetrievalServicePOST with any type of body
func NewPublishedDataDescriptionRetrievalServicePOSTRequestWithBody(server string, pType PublishedDataDescriptionRetrievalServicePOSTParamsType, format PublishedDataDescriptionRetrievalServicePOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/description", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishedEquivalentsRetrievalServicePOSTRequestWithTextBody calls the generic PublishedEquivalentsRetrievalServicePOST builder with text/plain body
func NewPublishedEquivalentsRetrievalServicePOSTRequestWithTextBody(server string, pType PublishedEquivalentsRetrievalServicePOSTParamsType, format PublishedEquivalentsRetrievalServicePOSTParamsFormat, body PublishedEquivalentsRetrievalServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPublishedEquivalentsRetrievalServicePOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewPublishedEquivalentsRetrievalServicePOSTRequestWithBody generates requests for PublishedEquivalentsRetrievalServicePOST with any type of body
func NewPublishedEquivalentsRetrievalServicePOSTRequestWithBody(server string, pType PublishedEquivalentsRetrievalServicePOSTParamsType, format PublishedEquivalentsRetrievalServicePOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/equivalents", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishedDataFullCycleServicePOSTRequestWithTextBody calls the generic PublishedDataFullCycleServicePOST builder with text/plain body
func NewPublishedDataFullCycleServicePOSTRequestWithTextBody(server string, pType PublishedDataFullCycleServicePOSTParamsType, format PublishedDataFullCycleServicePOSTParamsFormat, body PublishedDataFullCycleServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPublishedDataFullCycleServicePOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewPublishedDataFullCycleServicePOSTRequestWithBody generates requests for PublishedDataFullCycleServicePOST with any type of body
func NewPublishedDataFullCycleServicePOSTRequestWithBody(server string, pType PublishedDataFullCycleServicePOSTParamsType, format PublishedDataFullCycleServicePOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/full-cycle", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishedDataFulltextInquiryServicePOSTRequestWithTextBody calls the generic PublishedDataFulltextInquiryServicePOST builder with text/plain body
func NewPublishedDataFulltextInquiryServicePOSTRequestWithTextBody(server string, pType PublishedDataFulltextInquiryServicePOSTParamsType, format PublishedDataFulltextInquiryServicePOSTParamsFormat, body PublishedDataFulltextInquiryServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPublishedDataFulltextInquiryServicePOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewPublishedDataFulltextInquiryServicePOSTRequestWithBody generates requests for PublishedDataFulltextInquiryServicePOST with any type of body
func NewPublishedDataFulltextInquiryServicePOSTRequestWithBody(server string, pType PublishedDataFulltextInquiryServicePOSTParamsType, format PublishedDataFulltextInquiryServicePOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/fulltext", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishedImagesInquryServicePOSTRequestWithTextBody calls the generic PublishedImagesInquryServicePOST builder with text/plain body
func NewPublishedImagesInquryServicePOSTRequestWithTextBody(server string, pType PublishedImagesInquryServicePOSTParamsType, format PublishedImagesInquryServicePOSTParamsFormat, body PublishedImagesInquryServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewPublishedImagesInquryServicePOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewPublishedImagesInquryServicePOSTRequestWithBody generates requests for PublishedImagesInquryServicePOST with any type of body
func NewPublishedImagesInquryServicePOSTRequestWithBody(server string, pType PublishedImagesInquryServicePOSTParamsType, format PublishedImagesInquryServicePOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/images", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPublishedDataAbstractServiceRequest generates requests for PublishedDataAbstractService
func NewPublishedDataAbstractServiceRequest(server string, pType PublishedDataAbstractServiceParamsType, format PublishedDataAbstractServiceParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/%s/abstract", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishedDataRetrievalRequest generates requests for PublishedDataRetrieval
func NewPublishedDataRetrievalRequest(server string, pType PublishedDataRetrievalParamsType, format PublishedDataRetrievalParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/%s/biblio", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishedDataClaimsRetrievalServiceRequest generates requests for PublishedDataClaimsRetrievalService
func NewPublishedDataClaimsRetrievalServiceRequest(server string, pType PublishedDataClaimsRetrievalServiceParamsType, format PublishedDataClaimsRetrievalServiceParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/%s/claims", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishedDataDescriptionRetrievalServiceRequest generates requests for PublishedDataDescriptionRetrievalService
func NewPublishedDataDescriptionRetrievalServiceRequest(server string, pType PublishedDataDescriptionRetrievalServiceParamsType, format PublishedDataDescriptionRetrievalServiceParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/%s/description", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishedEquivalentsRetrievalServiceRequest generates requests for PublishedEquivalentsRetrievalService
func NewPublishedEquivalentsRetrievalServiceRequest(server string, pType PublishedEquivalentsRetrievalServiceParamsType, format PublishedEquivalentsRetrievalServiceParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/%s/equivalents", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishedDataFullCycleServiceRequest generates requests for PublishedDataFullCycleService
func NewPublishedDataFullCycleServiceRequest(server string, pType PublishedDataFullCycleServiceParamsType, format PublishedDataFullCycleServiceParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/%s/full-cycle", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishedDataFulltextInquiryServiceRequest generates requests for PublishedDataFulltextInquiryService
func NewPublishedDataFulltextInquiryServiceRequest(server string, pType PublishedDataFulltextInquiryServiceParamsType, format PublishedDataFulltextInquiryServiceParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/%s/fulltext", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPublishedImagesInquiryServiceRequest generates requests for PublishedImagesInquiryService
func NewPublishedImagesInquiryServiceRequest(server string, pType PublishedImagesInquiryServiceParamsType, format PublishedImagesInquiryServiceParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/published-data/%s/%s/%s/images", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterSearchServiceWithoutConstituentsRequest generates requests for RegisterSearchServiceWithoutConstituents
func NewRegisterSearchServiceWithoutConstituentsRequest(server string, params *RegisterSearchServiceWithoutConstituentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Range != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Range", runtime.ParamLocationQuery, *params.Range); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterSearchServiceWithVariableConstituentsRequest generates requests for RegisterSearchServiceWithVariableConstituents
func NewRegisterSearchServiceWithVariableConstituentsRequest(server string, constituent RegisterSearchServiceWithVariableConstituentsParamsConstituent, params *RegisterSearchServiceWithVariableConstituentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "constituent", runtime.ParamLocationPath, constituent)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register/search/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Range != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Range", runtime.ParamLocationQuery, *params.Range); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterRetrievalServicePOSTRequestWithTextBody calls the generic RegisterRetrievalServicePOST builder with text/plain body
func NewRegisterRetrievalServicePOSTRequestWithTextBody(server string, pType RegisterRetrievalServicePOSTParamsType, format RegisterRetrievalServicePOSTParamsFormat, body RegisterRetrievalServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewRegisterRetrievalServicePOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewRegisterRetrievalServicePOSTRequestWithBody generates requests for RegisterRetrievalServicePOST with any type of body
func NewRegisterRetrievalServicePOSTRequestWithBody(server string, pType RegisterRetrievalServicePOSTParamsType, format RegisterRetrievalServicePOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register/%s/%s/biblio", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterEventsServicePOSTRequestWithTextBody calls the generic RegisterEventsServicePOST builder with text/plain body
func NewRegisterEventsServicePOSTRequestWithTextBody(server string, pType RegisterEventsServicePOSTParamsType, format RegisterEventsServicePOSTParamsFormat, body RegisterEventsServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewRegisterEventsServicePOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewRegisterEventsServicePOSTRequestWithBody generates requests for RegisterEventsServicePOST with any type of body
func NewRegisterEventsServicePOSTRequestWithBody(server string, pType RegisterEventsServicePOSTParamsType, format RegisterEventsServicePOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register/%s/%s/events", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterProceduralStepsServicePOSTRequestWithTextBody calls the generic RegisterProceduralStepsServicePOST builder with text/plain body
func NewRegisterProceduralStepsServicePOSTRequestWithTextBody(server string, pType RegisterProceduralStepsServicePOSTParamsType, format RegisterProceduralStepsServicePOSTParamsFormat, body RegisterProceduralStepsServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewRegisterProceduralStepsServicePOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewRegisterProceduralStepsServicePOSTRequestWithBody generates requests for RegisterProceduralStepsServicePOST with any type of body
func NewRegisterProceduralStepsServicePOSTRequestWithBody(server string, pType RegisterProceduralStepsServicePOSTParamsType, format RegisterProceduralStepsServicePOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register/%s/%s/procedural-steps", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterUNIPServicePOSTRequestWithTextBody calls the generic RegisterUNIPServicePOST builder with text/plain body
func NewRegisterUNIPServicePOSTRequestWithTextBody(server string, pType RegisterUNIPServicePOSTParamsType, format RegisterUNIPServicePOSTParamsFormat, body RegisterUNIPServicePOSTTextRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyReader = strings.NewReader(string(body))
	return NewRegisterUNIPServicePOSTRequestWithBody(server, pType, format, "text/plain", bodyReader)
}

// NewRegisterUNIPServicePOSTRequestWithBody generates requests for RegisterUNIPServicePOST with any type of body
func NewRegisterUNIPServicePOSTRequestWithBody(server string, pType RegisterUNIPServicePOSTParamsType, format RegisterUNIPServicePOSTParamsFormat, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register/%s/%s/upp", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRegisterRetrievalServiceRequest generates requests for RegisterRetrievalService
func NewRegisterRetrievalServiceRequest(server string, pType RegisterRetrievalServiceParamsType, format RegisterRetrievalServiceParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register/%s/%s/%s/biblio", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterEventsServiceRequest generates requests for RegisterEventsService
func NewRegisterEventsServiceRequest(server string, pType RegisterEventsServiceParamsType, format RegisterEventsServiceParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register/%s/%s/%s/events", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterProceduralStepsServiceRequest generates requests for RegisterProceduralStepsService
func NewRegisterProceduralStepsServiceRequest(server string, pType RegisterProceduralStepsServiceParamsType, format RegisterProceduralStepsServiceParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register/%s/%s/%s/procedural-steps", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRegisterUNIPServiceRequest generates requests for RegisterUNIPService
func NewRegisterUNIPServiceRequest(server string, pType RegisterUNIPServiceParamsType, format RegisterUNIPServiceParamsFormat, number string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "type", runtime.ParamLocationPath, pType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "format", runtime.ParamLocationPath, format)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "number", runtime.ParamLocationPath, number)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/register/%s/%s/%s/upp", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetUsageStatisticsWithResponse request
	GetUsageStatisticsWithResponse(ctx context.Context, params *GetUsageStatisticsParams, reqEditors ...RequestEditorFn) (*GetUsageStatisticsResponse, error)

	// ClassificationSchemaServicePOSTWithBodyWithResponse request with any body
	ClassificationSchemaServicePOSTWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClassificationSchemaServicePOSTResponse, error)

	ClassificationSchemaServicePOSTWithTextBodyWithResponse(ctx context.Context, body ClassificationSchemaServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*ClassificationSchemaServicePOSTResponse, error)

	// ClassificationMediaServiceWithResponse request
	ClassificationMediaServiceWithResponse(ctx context.Context, mediaName string, params *ClassificationMediaServiceParams, reqEditors ...RequestEditorFn) (*ClassificationMediaServiceResponse, error)

	// ClassificationStatisticsServiceWithResponse request
	ClassificationStatisticsServiceWithResponse(ctx context.Context, params *ClassificationStatisticsServiceParams, reqEditors ...RequestEditorFn) (*ClassificationStatisticsServiceResponse, error)

	// ClassificationSchemaServiceWithResponse request
	ClassificationSchemaServiceWithResponse(ctx context.Context, class string, params *ClassificationSchemaServiceParams, reqEditors ...RequestEditorFn) (*ClassificationSchemaServiceResponse, error)

	// ClassificationSchemaSubclassServiceWithResponse request
	ClassificationSchemaSubclassServiceWithResponse(ctx context.Context, class string, subclass string, params *ClassificationSchemaSubclassServiceParams, reqEditors ...RequestEditorFn) (*ClassificationSchemaSubclassServiceResponse, error)

	// ClassificationMappingServiceWithResponse request
	ClassificationMappingServiceWithResponse(ctx context.Context, inputFormat ClassificationMappingServiceParamsInputFormat, class string, subclass string, outputFormat ClassificationMappingServiceParamsOutputFormat, params *ClassificationMappingServiceParams, reqEditors ...RequestEditorFn) (*ClassificationMappingServiceResponse, error)

	// INPADOCFamilyRetrievalServicePOSTWithBodyWithResponse request with any body
	INPADOCFamilyRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServicePOSTParamsType, format INPADOCFamilyRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServicePOSTResponse, error)

	INPADOCFamilyRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServicePOSTParamsType, format INPADOCFamilyRetrievalServicePOSTParamsFormat, body INPADOCFamilyRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServicePOSTResponse, error)

	// INPADOCFamilyRetrievalServiceWithBiblioPOSTWithBodyWithResponse request with any body
	INPADOCFamilyRetrievalServiceWithBiblioPOSTWithBodyWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsType, format INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceWithBiblioPOSTResponse, error)

	INPADOCFamilyRetrievalServiceWithBiblioPOSTWithTextBodyWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsType, format INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsFormat, body INPADOCFamilyRetrievalServiceWithBiblioPOSTTextRequestBody, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceWithBiblioPOSTResponse, error)

	// INPADOCFamilyRetrievalServiceWithLegalPOSTWithBodyWithResponse request with any body
	INPADOCFamilyRetrievalServiceWithLegalPOSTWithBodyWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithLegalPOSTParamsType, format INPADOCFamilyRetrievalServiceWithLegalPOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceWithLegalPOSTResponse, error)

	INPADOCFamilyRetrievalServiceWithLegalPOSTWithTextBodyWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithLegalPOSTParamsType, format INPADOCFamilyRetrievalServiceWithLegalPOSTParamsFormat, body INPADOCFamilyRetrievalServiceWithLegalPOSTTextRequestBody, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceWithLegalPOSTResponse, error)

	// INPADOCFamilyRetrievalServiceWithResponse request
	INPADOCFamilyRetrievalServiceWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceParamsType, format INPADOCFamilyRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceResponse, error)

	// INPADOCFamilyRetrievalServiceWithBiblioWithResponse request
	INPADOCFamilyRetrievalServiceWithBiblioWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithBiblioParamsType, format INPADOCFamilyRetrievalServiceWithBiblioParamsFormat, number string, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceWithBiblioResponse, error)

	// INPADOCFamilyRetrievalServiceWithLegalWithResponse request
	INPADOCFamilyRetrievalServiceWithLegalWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithLegalParamsType, format INPADOCFamilyRetrievalServiceWithLegalParamsFormat, number string, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceWithLegalResponse, error)

	// LegalDataRetrievalServicePOSTWithBodyWithResponse request with any body
	LegalDataRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, pType LegalDataRetrievalServicePOSTParamsType, format LegalDataRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LegalDataRetrievalServicePOSTResponse, error)

	LegalDataRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, pType LegalDataRetrievalServicePOSTParamsType, format LegalDataRetrievalServicePOSTParamsFormat, body LegalDataRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*LegalDataRetrievalServicePOSTResponse, error)

	// LegalDataRetrievalServiceWithResponse request
	LegalDataRetrievalServiceWithResponse(ctx context.Context, pType LegalDataRetrievalServiceParamsType, format LegalDataRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*LegalDataRetrievalServiceResponse, error)

	// NumberServiceWithResponse request
	NumberServiceWithResponse(ctx context.Context, pType NumberServiceParamsType, inputFormat NumberServiceParamsInputFormat, number string, outputFormat NumberServiceParamsOutputFormat, reqEditors ...RequestEditorFn) (*NumberServiceResponse, error)

	// NumberServicePOSTWithBodyWithResponse request with any body
	NumberServicePOSTWithBodyWithResponse(ctx context.Context, pType NumberServicePOSTParamsType, inputFormat NumberServicePOSTParamsInputFormat, outputFormat NumberServicePOSTParamsOutputFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NumberServicePOSTResponse, error)

	NumberServicePOSTWithTextBodyWithResponse(ctx context.Context, pType NumberServicePOSTParamsType, inputFormat NumberServicePOSTParamsInputFormat, outputFormat NumberServicePOSTParamsOutputFormat, body NumberServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*NumberServicePOSTResponse, error)

	// PublishedImagesRetrievalServicePOSTWithBodyWithResponse request with any body
	PublishedImagesRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, params *PublishedImagesRetrievalServicePOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedImagesRetrievalServicePOSTResponse, error)

	PublishedImagesRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, params *PublishedImagesRetrievalServicePOSTParams, body PublishedImagesRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedImagesRetrievalServicePOSTResponse, error)

	// PublishedImagesRetrievalServiceWithResponse request
	PublishedImagesRetrievalServiceWithResponse(ctx context.Context, imageCountry string, imageNumber string, imageKind string, imageType string, params *PublishedImagesRetrievalServiceParams, reqEditors ...RequestEditorFn) (*PublishedImagesRetrievalServiceResponse, error)

	// PublishedDataKeywordsSearchWithoutConsituentsWithResponse request
	PublishedDataKeywordsSearchWithoutConsituentsWithResponse(ctx context.Context, params *PublishedDataKeywordsSearchWithoutConsituentsParams, reqEditors ...RequestEditorFn) (*PublishedDataKeywordsSearchWithoutConsituentsResponse, error)

	// PublishedDataKeywordsSearchWithVariableConstituentsWithResponse request
	PublishedDataKeywordsSearchWithVariableConstituentsWithResponse(ctx context.Context, constituent PublishedDataKeywordsSearchWithVariableConstituentsParamsConstituent, params *PublishedDataKeywordsSearchWithVariableConstituentsParams, reqEditors ...RequestEditorFn) (*PublishedDataKeywordsSearchWithVariableConstituentsResponse, error)

	// PublishedDataAbstractServicePOSTWithBodyWithResponse request with any body
	PublishedDataAbstractServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedDataAbstractServicePOSTParamsType, format PublishedDataAbstractServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedDataAbstractServicePOSTResponse, error)

	PublishedDataAbstractServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedDataAbstractServicePOSTParamsType, format PublishedDataAbstractServicePOSTParamsFormat, body PublishedDataAbstractServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedDataAbstractServicePOSTResponse, error)

	// PublishedDataRetrievalPOSTWithBodyWithResponse request with any body
	PublishedDataRetrievalPOSTWithBodyWithResponse(ctx context.Context, pType PublishedDataRetrievalPOSTParamsType, format PublishedDataRetrievalPOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedDataRetrievalPOSTResponse, error)

	PublishedDataRetrievalPOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedDataRetrievalPOSTParamsType, format PublishedDataRetrievalPOSTParamsFormat, body PublishedDataRetrievalPOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedDataRetrievalPOSTResponse, error)

	// PublishedClaimsRetrievalServicePOSTWithBodyWithResponse request with any body
	PublishedClaimsRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedClaimsRetrievalServicePOSTParamsType, format PublishedClaimsRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedClaimsRetrievalServicePOSTResponse, error)

	PublishedClaimsRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedClaimsRetrievalServicePOSTParamsType, format PublishedClaimsRetrievalServicePOSTParamsFormat, body PublishedClaimsRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedClaimsRetrievalServicePOSTResponse, error)

	// PublishedDataDescriptionRetrievalServicePOSTWithBodyWithResponse request with any body
	PublishedDataDescriptionRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedDataDescriptionRetrievalServicePOSTParamsType, format PublishedDataDescriptionRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedDataDescriptionRetrievalServicePOSTResponse, error)

	PublishedDataDescriptionRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedDataDescriptionRetrievalServicePOSTParamsType, format PublishedDataDescriptionRetrievalServicePOSTParamsFormat, body PublishedDataDescriptionRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedDataDescriptionRetrievalServicePOSTResponse, error)

	// PublishedEquivalentsRetrievalServicePOSTWithBodyWithResponse request with any body
	PublishedEquivalentsRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedEquivalentsRetrievalServicePOSTParamsType, format PublishedEquivalentsRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedEquivalentsRetrievalServicePOSTResponse, error)

	PublishedEquivalentsRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedEquivalentsRetrievalServicePOSTParamsType, format PublishedEquivalentsRetrievalServicePOSTParamsFormat, body PublishedEquivalentsRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedEquivalentsRetrievalServicePOSTResponse, error)

	// PublishedDataFullCycleServicePOSTWithBodyWithResponse request with any body
	PublishedDataFullCycleServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedDataFullCycleServicePOSTParamsType, format PublishedDataFullCycleServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedDataFullCycleServicePOSTResponse, error)

	PublishedDataFullCycleServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedDataFullCycleServicePOSTParamsType, format PublishedDataFullCycleServicePOSTParamsFormat, body PublishedDataFullCycleServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedDataFullCycleServicePOSTResponse, error)

	// PublishedDataFulltextInquiryServicePOSTWithBodyWithResponse request with any body
	PublishedDataFulltextInquiryServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedDataFulltextInquiryServicePOSTParamsType, format PublishedDataFulltextInquiryServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedDataFulltextInquiryServicePOSTResponse, error)

	PublishedDataFulltextInquiryServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedDataFulltextInquiryServicePOSTParamsType, format PublishedDataFulltextInquiryServicePOSTParamsFormat, body PublishedDataFulltextInquiryServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedDataFulltextInquiryServicePOSTResponse, error)

	// PublishedImagesInquryServicePOSTWithBodyWithResponse request with any body
	PublishedImagesInquryServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedImagesInquryServicePOSTParamsType, format PublishedImagesInquryServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedImagesInquryServicePOSTResponse, error)

	PublishedImagesInquryServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedImagesInquryServicePOSTParamsType, format PublishedImagesInquryServicePOSTParamsFormat, body PublishedImagesInquryServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedImagesInquryServicePOSTResponse, error)

	// PublishedDataAbstractServiceWithResponse request
	PublishedDataAbstractServiceWithResponse(ctx context.Context, pType PublishedDataAbstractServiceParamsType, format PublishedDataAbstractServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedDataAbstractServiceResponse, error)

	// PublishedDataRetrievalWithResponse request
	PublishedDataRetrievalWithResponse(ctx context.Context, pType PublishedDataRetrievalParamsType, format PublishedDataRetrievalParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedDataRetrievalResponse, error)

	// PublishedDataClaimsRetrievalServiceWithResponse request
	PublishedDataClaimsRetrievalServiceWithResponse(ctx context.Context, pType PublishedDataClaimsRetrievalServiceParamsType, format PublishedDataClaimsRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedDataClaimsRetrievalServiceResponse, error)

	// PublishedDataDescriptionRetrievalServiceWithResponse request
	PublishedDataDescriptionRetrievalServiceWithResponse(ctx context.Context, pType PublishedDataDescriptionRetrievalServiceParamsType, format PublishedDataDescriptionRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedDataDescriptionRetrievalServiceResponse, error)

	// PublishedEquivalentsRetrievalServiceWithResponse request
	PublishedEquivalentsRetrievalServiceWithResponse(ctx context.Context, pType PublishedEquivalentsRetrievalServiceParamsType, format PublishedEquivalentsRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedEquivalentsRetrievalServiceResponse, error)

	// PublishedDataFullCycleServiceWithResponse request
	PublishedDataFullCycleServiceWithResponse(ctx context.Context, pType PublishedDataFullCycleServiceParamsType, format PublishedDataFullCycleServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedDataFullCycleServiceResponse, error)

	// PublishedDataFulltextInquiryServiceWithResponse request
	PublishedDataFulltextInquiryServiceWithResponse(ctx context.Context, pType PublishedDataFulltextInquiryServiceParamsType, format PublishedDataFulltextInquiryServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedDataFulltextInquiryServiceResponse, error)

	// PublishedImagesInquiryServiceWithResponse request
	PublishedImagesInquiryServiceWithResponse(ctx context.Context, pType PublishedImagesInquiryServiceParamsType, format PublishedImagesInquiryServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedImagesInquiryServiceResponse, error)

	// RegisterSearchServiceWithoutConstituentsWithResponse request
	RegisterSearchServiceWithoutConstituentsWithResponse(ctx context.Context, params *RegisterSearchServiceWithoutConstituentsParams, reqEditors ...RequestEditorFn) (*RegisterSearchServiceWithoutConstituentsResponse, error)

	// RegisterSearchServiceWithVariableConstituentsWithResponse request
	RegisterSearchServiceWithVariableConstituentsWithResponse(ctx context.Context, constituent RegisterSearchServiceWithVariableConstituentsParamsConstituent, params *RegisterSearchServiceWithVariableConstituentsParams, reqEditors ...RequestEditorFn) (*RegisterSearchServiceWithVariableConstituentsResponse, error)

	// RegisterRetrievalServicePOSTWithBodyWithResponse request with any body
	RegisterRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, pType RegisterRetrievalServicePOSTParamsType, format RegisterRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterRetrievalServicePOSTResponse, error)

	RegisterRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, pType RegisterRetrievalServicePOSTParamsType, format RegisterRetrievalServicePOSTParamsFormat, body RegisterRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*RegisterRetrievalServicePOSTResponse, error)

	// RegisterEventsServicePOSTWithBodyWithResponse request with any body
	RegisterEventsServicePOSTWithBodyWithResponse(ctx context.Context, pType RegisterEventsServicePOSTParamsType, format RegisterEventsServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterEventsServicePOSTResponse, error)

	RegisterEventsServicePOSTWithTextBodyWithResponse(ctx context.Context, pType RegisterEventsServicePOSTParamsType, format RegisterEventsServicePOSTParamsFormat, body RegisterEventsServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*RegisterEventsServicePOSTResponse, error)

	// RegisterProceduralStepsServicePOSTWithBodyWithResponse request with any body
	RegisterProceduralStepsServicePOSTWithBodyWithResponse(ctx context.Context, pType RegisterProceduralStepsServicePOSTParamsType, format RegisterProceduralStepsServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterProceduralStepsServicePOSTResponse, error)

	RegisterProceduralStepsServicePOSTWithTextBodyWithResponse(ctx context.Context, pType RegisterProceduralStepsServicePOSTParamsType, format RegisterProceduralStepsServicePOSTParamsFormat, body RegisterProceduralStepsServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*RegisterProceduralStepsServicePOSTResponse, error)

	// RegisterUNIPServicePOSTWithBodyWithResponse request with any body
	RegisterUNIPServicePOSTWithBodyWithResponse(ctx context.Context, pType RegisterUNIPServicePOSTParamsType, format RegisterUNIPServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterUNIPServicePOSTResponse, error)

	RegisterUNIPServicePOSTWithTextBodyWithResponse(ctx context.Context, pType RegisterUNIPServicePOSTParamsType, format RegisterUNIPServicePOSTParamsFormat, body RegisterUNIPServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*RegisterUNIPServicePOSTResponse, error)

	// RegisterRetrievalServiceWithResponse request
	RegisterRetrievalServiceWithResponse(ctx context.Context, pType RegisterRetrievalServiceParamsType, format RegisterRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*RegisterRetrievalServiceResponse, error)

	// RegisterEventsServiceWithResponse request
	RegisterEventsServiceWithResponse(ctx context.Context, pType RegisterEventsServiceParamsType, format RegisterEventsServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*RegisterEventsServiceResponse, error)

	// RegisterProceduralStepsServiceWithResponse request
	RegisterProceduralStepsServiceWithResponse(ctx context.Context, pType RegisterProceduralStepsServiceParamsType, format RegisterProceduralStepsServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*RegisterProceduralStepsServiceResponse, error)

	// RegisterUNIPServiceWithResponse request
	RegisterUNIPServiceWithResponse(ctx context.Context, pType RegisterUNIPServiceParamsType, format RegisterUNIPServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*RegisterUNIPServiceResponse, error)
}

type GetUsageStatisticsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetUsageStatisticsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsageStatisticsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClassificationSchemaServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r ClassificationSchemaServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClassificationSchemaServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClassificationMediaServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ClassificationMediaServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClassificationMediaServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClassificationStatisticsServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r ClassificationStatisticsServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClassificationStatisticsServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClassificationSchemaServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r ClassificationSchemaServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClassificationSchemaServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClassificationSchemaSubclassServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r ClassificationSchemaSubclassServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClassificationSchemaSubclassServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ClassificationMappingServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r ClassificationMappingServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ClassificationMappingServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type INPADOCFamilyRetrievalServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r INPADOCFamilyRetrievalServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r INPADOCFamilyRetrievalServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type INPADOCFamilyRetrievalServiceWithBiblioPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r INPADOCFamilyRetrievalServiceWithBiblioPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r INPADOCFamilyRetrievalServiceWithBiblioPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type INPADOCFamilyRetrievalServiceWithLegalPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r INPADOCFamilyRetrievalServiceWithLegalPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r INPADOCFamilyRetrievalServiceWithLegalPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type INPADOCFamilyRetrievalServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r INPADOCFamilyRetrievalServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r INPADOCFamilyRetrievalServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type INPADOCFamilyRetrievalServiceWithBiblioResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r INPADOCFamilyRetrievalServiceWithBiblioResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r INPADOCFamilyRetrievalServiceWithBiblioResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type INPADOCFamilyRetrievalServiceWithLegalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r INPADOCFamilyRetrievalServiceWithLegalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r INPADOCFamilyRetrievalServiceWithLegalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LegalDataRetrievalServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r LegalDataRetrievalServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LegalDataRetrievalServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LegalDataRetrievalServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r LegalDataRetrievalServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LegalDataRetrievalServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NumberServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r NumberServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NumberServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type NumberServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r NumberServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r NumberServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedImagesRetrievalServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublishedImagesRetrievalServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedImagesRetrievalServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedImagesRetrievalServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PublishedImagesRetrievalServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedImagesRetrievalServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedDataKeywordsSearchWithoutConsituentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedDataKeywordsSearchWithoutConsituentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedDataKeywordsSearchWithoutConsituentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedDataKeywordsSearchWithVariableConstituentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedDataKeywordsSearchWithVariableConstituentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedDataKeywordsSearchWithVariableConstituentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedDataAbstractServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedDataAbstractServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedDataAbstractServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedDataRetrievalPOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedDataRetrievalPOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedDataRetrievalPOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedClaimsRetrievalServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedClaimsRetrievalServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedClaimsRetrievalServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedDataDescriptionRetrievalServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedDataDescriptionRetrievalServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedDataDescriptionRetrievalServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedEquivalentsRetrievalServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedEquivalentsRetrievalServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedEquivalentsRetrievalServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedDataFullCycleServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedDataFullCycleServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedDataFullCycleServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedDataFulltextInquiryServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedDataFulltextInquiryServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedDataFulltextInquiryServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedImagesInquryServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedImagesInquryServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedImagesInquryServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedDataAbstractServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedDataAbstractServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedDataAbstractServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedDataRetrievalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedDataRetrievalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedDataRetrievalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedDataClaimsRetrievalServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedDataClaimsRetrievalServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedDataClaimsRetrievalServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedDataDescriptionRetrievalServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedDataDescriptionRetrievalServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedDataDescriptionRetrievalServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedEquivalentsRetrievalServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedEquivalentsRetrievalServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedEquivalentsRetrievalServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedDataFullCycleServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedDataFullCycleServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedDataFullCycleServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedDataFulltextInquiryServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedDataFulltextInquiryServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedDataFulltextInquiryServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PublishedImagesInquiryServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r PublishedImagesInquiryServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PublishedImagesInquiryServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterSearchServiceWithoutConstituentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r RegisterSearchServiceWithoutConstituentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterSearchServiceWithoutConstituentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterSearchServiceWithVariableConstituentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r RegisterSearchServiceWithVariableConstituentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterSearchServiceWithVariableConstituentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterRetrievalServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r RegisterRetrievalServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterRetrievalServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterEventsServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r RegisterEventsServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterEventsServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterProceduralStepsServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r RegisterProceduralStepsServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterProceduralStepsServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterUNIPServicePOSTResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r RegisterUNIPServicePOSTResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterUNIPServicePOSTResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterRetrievalServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r RegisterRetrievalServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterRetrievalServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterEventsServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r RegisterEventsServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterEventsServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterProceduralStepsServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r RegisterProceduralStepsServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterProceduralStepsServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RegisterUNIPServiceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	XML200       *string
	JSONDefault  *Error
	XMLDefault   *Error
}

// Status returns HTTPResponse.Status
func (r RegisterUNIPServiceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RegisterUNIPServiceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetUsageStatisticsWithResponse request returning *GetUsageStatisticsResponse
func (c *ClientWithResponses) GetUsageStatisticsWithResponse(ctx context.Context, params *GetUsageStatisticsParams, reqEditors ...RequestEditorFn) (*GetUsageStatisticsResponse, error) {
	rsp, err := c.GetUsageStatistics(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsageStatisticsResponse(rsp)
}

// ClassificationSchemaServicePOSTWithBodyWithResponse request with arbitrary body returning *ClassificationSchemaServicePOSTResponse
func (c *ClientWithResponses) ClassificationSchemaServicePOSTWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ClassificationSchemaServicePOSTResponse, error) {
	rsp, err := c.ClassificationSchemaServicePOSTWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClassificationSchemaServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) ClassificationSchemaServicePOSTWithTextBodyWithResponse(ctx context.Context, body ClassificationSchemaServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*ClassificationSchemaServicePOSTResponse, error) {
	rsp, err := c.ClassificationSchemaServicePOSTWithTextBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClassificationSchemaServicePOSTResponse(rsp)
}

// ClassificationMediaServiceWithResponse request returning *ClassificationMediaServiceResponse
func (c *ClientWithResponses) ClassificationMediaServiceWithResponse(ctx context.Context, mediaName string, params *ClassificationMediaServiceParams, reqEditors ...RequestEditorFn) (*ClassificationMediaServiceResponse, error) {
	rsp, err := c.ClassificationMediaService(ctx, mediaName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClassificationMediaServiceResponse(rsp)
}

// ClassificationStatisticsServiceWithResponse request returning *ClassificationStatisticsServiceResponse
func (c *ClientWithResponses) ClassificationStatisticsServiceWithResponse(ctx context.Context, params *ClassificationStatisticsServiceParams, reqEditors ...RequestEditorFn) (*ClassificationStatisticsServiceResponse, error) {
	rsp, err := c.ClassificationStatisticsService(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClassificationStatisticsServiceResponse(rsp)
}

// ClassificationSchemaServiceWithResponse request returning *ClassificationSchemaServiceResponse
func (c *ClientWithResponses) ClassificationSchemaServiceWithResponse(ctx context.Context, class string, params *ClassificationSchemaServiceParams, reqEditors ...RequestEditorFn) (*ClassificationSchemaServiceResponse, error) {
	rsp, err := c.ClassificationSchemaService(ctx, class, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClassificationSchemaServiceResponse(rsp)
}

// ClassificationSchemaSubclassServiceWithResponse request returning *ClassificationSchemaSubclassServiceResponse
func (c *ClientWithResponses) ClassificationSchemaSubclassServiceWithResponse(ctx context.Context, class string, subclass string, params *ClassificationSchemaSubclassServiceParams, reqEditors ...RequestEditorFn) (*ClassificationSchemaSubclassServiceResponse, error) {
	rsp, err := c.ClassificationSchemaSubclassService(ctx, class, subclass, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClassificationSchemaSubclassServiceResponse(rsp)
}

// ClassificationMappingServiceWithResponse request returning *ClassificationMappingServiceResponse
func (c *ClientWithResponses) ClassificationMappingServiceWithResponse(ctx context.Context, inputFormat ClassificationMappingServiceParamsInputFormat, class string, subclass string, outputFormat ClassificationMappingServiceParamsOutputFormat, params *ClassificationMappingServiceParams, reqEditors ...RequestEditorFn) (*ClassificationMappingServiceResponse, error) {
	rsp, err := c.ClassificationMappingService(ctx, inputFormat, class, subclass, outputFormat, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseClassificationMappingServiceResponse(rsp)
}

// INPADOCFamilyRetrievalServicePOSTWithBodyWithResponse request with arbitrary body returning *INPADOCFamilyRetrievalServicePOSTResponse
func (c *ClientWithResponses) INPADOCFamilyRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServicePOSTParamsType, format INPADOCFamilyRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServicePOSTResponse, error) {
	rsp, err := c.INPADOCFamilyRetrievalServicePOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseINPADOCFamilyRetrievalServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) INPADOCFamilyRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServicePOSTParamsType, format INPADOCFamilyRetrievalServicePOSTParamsFormat, body INPADOCFamilyRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServicePOSTResponse, error) {
	rsp, err := c.INPADOCFamilyRetrievalServicePOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseINPADOCFamilyRetrievalServicePOSTResponse(rsp)
}

// INPADOCFamilyRetrievalServiceWithBiblioPOSTWithBodyWithResponse request with arbitrary body returning *INPADOCFamilyRetrievalServiceWithBiblioPOSTResponse
func (c *ClientWithResponses) INPADOCFamilyRetrievalServiceWithBiblioPOSTWithBodyWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsType, format INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceWithBiblioPOSTResponse, error) {
	rsp, err := c.INPADOCFamilyRetrievalServiceWithBiblioPOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseINPADOCFamilyRetrievalServiceWithBiblioPOSTResponse(rsp)
}

func (c *ClientWithResponses) INPADOCFamilyRetrievalServiceWithBiblioPOSTWithTextBodyWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsType, format INPADOCFamilyRetrievalServiceWithBiblioPOSTParamsFormat, body INPADOCFamilyRetrievalServiceWithBiblioPOSTTextRequestBody, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceWithBiblioPOSTResponse, error) {
	rsp, err := c.INPADOCFamilyRetrievalServiceWithBiblioPOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseINPADOCFamilyRetrievalServiceWithBiblioPOSTResponse(rsp)
}

// INPADOCFamilyRetrievalServiceWithLegalPOSTWithBodyWithResponse request with arbitrary body returning *INPADOCFamilyRetrievalServiceWithLegalPOSTResponse
func (c *ClientWithResponses) INPADOCFamilyRetrievalServiceWithLegalPOSTWithBodyWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithLegalPOSTParamsType, format INPADOCFamilyRetrievalServiceWithLegalPOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceWithLegalPOSTResponse, error) {
	rsp, err := c.INPADOCFamilyRetrievalServiceWithLegalPOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseINPADOCFamilyRetrievalServiceWithLegalPOSTResponse(rsp)
}

func (c *ClientWithResponses) INPADOCFamilyRetrievalServiceWithLegalPOSTWithTextBodyWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithLegalPOSTParamsType, format INPADOCFamilyRetrievalServiceWithLegalPOSTParamsFormat, body INPADOCFamilyRetrievalServiceWithLegalPOSTTextRequestBody, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceWithLegalPOSTResponse, error) {
	rsp, err := c.INPADOCFamilyRetrievalServiceWithLegalPOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseINPADOCFamilyRetrievalServiceWithLegalPOSTResponse(rsp)
}

// INPADOCFamilyRetrievalServiceWithResponse request returning *INPADOCFamilyRetrievalServiceResponse
func (c *ClientWithResponses) INPADOCFamilyRetrievalServiceWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceParamsType, format INPADOCFamilyRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceResponse, error) {
	rsp, err := c.INPADOCFamilyRetrievalService(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseINPADOCFamilyRetrievalServiceResponse(rsp)
}

// INPADOCFamilyRetrievalServiceWithBiblioWithResponse request returning *INPADOCFamilyRetrievalServiceWithBiblioResponse
func (c *ClientWithResponses) INPADOCFamilyRetrievalServiceWithBiblioWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithBiblioParamsType, format INPADOCFamilyRetrievalServiceWithBiblioParamsFormat, number string, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceWithBiblioResponse, error) {
	rsp, err := c.INPADOCFamilyRetrievalServiceWithBiblio(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseINPADOCFamilyRetrievalServiceWithBiblioResponse(rsp)
}

// INPADOCFamilyRetrievalServiceWithLegalWithResponse request returning *INPADOCFamilyRetrievalServiceWithLegalResponse
func (c *ClientWithResponses) INPADOCFamilyRetrievalServiceWithLegalWithResponse(ctx context.Context, pType INPADOCFamilyRetrievalServiceWithLegalParamsType, format INPADOCFamilyRetrievalServiceWithLegalParamsFormat, number string, reqEditors ...RequestEditorFn) (*INPADOCFamilyRetrievalServiceWithLegalResponse, error) {
	rsp, err := c.INPADOCFamilyRetrievalServiceWithLegal(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseINPADOCFamilyRetrievalServiceWithLegalResponse(rsp)
}

// LegalDataRetrievalServicePOSTWithBodyWithResponse request with arbitrary body returning *LegalDataRetrievalServicePOSTResponse
func (c *ClientWithResponses) LegalDataRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, pType LegalDataRetrievalServicePOSTParamsType, format LegalDataRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LegalDataRetrievalServicePOSTResponse, error) {
	rsp, err := c.LegalDataRetrievalServicePOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLegalDataRetrievalServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) LegalDataRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, pType LegalDataRetrievalServicePOSTParamsType, format LegalDataRetrievalServicePOSTParamsFormat, body LegalDataRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*LegalDataRetrievalServicePOSTResponse, error) {
	rsp, err := c.LegalDataRetrievalServicePOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLegalDataRetrievalServicePOSTResponse(rsp)
}

// LegalDataRetrievalServiceWithResponse request returning *LegalDataRetrievalServiceResponse
func (c *ClientWithResponses) LegalDataRetrievalServiceWithResponse(ctx context.Context, pType LegalDataRetrievalServiceParamsType, format LegalDataRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*LegalDataRetrievalServiceResponse, error) {
	rsp, err := c.LegalDataRetrievalService(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLegalDataRetrievalServiceResponse(rsp)
}

// NumberServiceWithResponse request returning *NumberServiceResponse
func (c *ClientWithResponses) NumberServiceWithResponse(ctx context.Context, pType NumberServiceParamsType, inputFormat NumberServiceParamsInputFormat, number string, outputFormat NumberServiceParamsOutputFormat, reqEditors ...RequestEditorFn) (*NumberServiceResponse, error) {
	rsp, err := c.NumberService(ctx, pType, inputFormat, number, outputFormat, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNumberServiceResponse(rsp)
}

// NumberServicePOSTWithBodyWithResponse request with arbitrary body returning *NumberServicePOSTResponse
func (c *ClientWithResponses) NumberServicePOSTWithBodyWithResponse(ctx context.Context, pType NumberServicePOSTParamsType, inputFormat NumberServicePOSTParamsInputFormat, outputFormat NumberServicePOSTParamsOutputFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*NumberServicePOSTResponse, error) {
	rsp, err := c.NumberServicePOSTWithBody(ctx, pType, inputFormat, outputFormat, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNumberServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) NumberServicePOSTWithTextBodyWithResponse(ctx context.Context, pType NumberServicePOSTParamsType, inputFormat NumberServicePOSTParamsInputFormat, outputFormat NumberServicePOSTParamsOutputFormat, body NumberServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*NumberServicePOSTResponse, error) {
	rsp, err := c.NumberServicePOSTWithTextBody(ctx, pType, inputFormat, outputFormat, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseNumberServicePOSTResponse(rsp)
}

// PublishedImagesRetrievalServicePOSTWithBodyWithResponse request with arbitrary body returning *PublishedImagesRetrievalServicePOSTResponse
func (c *ClientWithResponses) PublishedImagesRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, params *PublishedImagesRetrievalServicePOSTParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedImagesRetrievalServicePOSTResponse, error) {
	rsp, err := c.PublishedImagesRetrievalServicePOSTWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedImagesRetrievalServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) PublishedImagesRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, params *PublishedImagesRetrievalServicePOSTParams, body PublishedImagesRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedImagesRetrievalServicePOSTResponse, error) {
	rsp, err := c.PublishedImagesRetrievalServicePOSTWithTextBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedImagesRetrievalServicePOSTResponse(rsp)
}

// PublishedImagesRetrievalServiceWithResponse request returning *PublishedImagesRetrievalServiceResponse
func (c *ClientWithResponses) PublishedImagesRetrievalServiceWithResponse(ctx context.Context, imageCountry string, imageNumber string, imageKind string, imageType string, params *PublishedImagesRetrievalServiceParams, reqEditors ...RequestEditorFn) (*PublishedImagesRetrievalServiceResponse, error) {
	rsp, err := c.PublishedImagesRetrievalService(ctx, imageCountry, imageNumber, imageKind, imageType, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedImagesRetrievalServiceResponse(rsp)
}

// PublishedDataKeywordsSearchWithoutConsituentsWithResponse request returning *PublishedDataKeywordsSearchWithoutConsituentsResponse
func (c *ClientWithResponses) PublishedDataKeywordsSearchWithoutConsituentsWithResponse(ctx context.Context, params *PublishedDataKeywordsSearchWithoutConsituentsParams, reqEditors ...RequestEditorFn) (*PublishedDataKeywordsSearchWithoutConsituentsResponse, error) {
	rsp, err := c.PublishedDataKeywordsSearchWithoutConsituents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataKeywordsSearchWithoutConsituentsResponse(rsp)
}

// PublishedDataKeywordsSearchWithVariableConstituentsWithResponse request returning *PublishedDataKeywordsSearchWithVariableConstituentsResponse
func (c *ClientWithResponses) PublishedDataKeywordsSearchWithVariableConstituentsWithResponse(ctx context.Context, constituent PublishedDataKeywordsSearchWithVariableConstituentsParamsConstituent, params *PublishedDataKeywordsSearchWithVariableConstituentsParams, reqEditors ...RequestEditorFn) (*PublishedDataKeywordsSearchWithVariableConstituentsResponse, error) {
	rsp, err := c.PublishedDataKeywordsSearchWithVariableConstituents(ctx, constituent, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataKeywordsSearchWithVariableConstituentsResponse(rsp)
}

// PublishedDataAbstractServicePOSTWithBodyWithResponse request with arbitrary body returning *PublishedDataAbstractServicePOSTResponse
func (c *ClientWithResponses) PublishedDataAbstractServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedDataAbstractServicePOSTParamsType, format PublishedDataAbstractServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedDataAbstractServicePOSTResponse, error) {
	rsp, err := c.PublishedDataAbstractServicePOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataAbstractServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) PublishedDataAbstractServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedDataAbstractServicePOSTParamsType, format PublishedDataAbstractServicePOSTParamsFormat, body PublishedDataAbstractServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedDataAbstractServicePOSTResponse, error) {
	rsp, err := c.PublishedDataAbstractServicePOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataAbstractServicePOSTResponse(rsp)
}

// PublishedDataRetrievalPOSTWithBodyWithResponse request with arbitrary body returning *PublishedDataRetrievalPOSTResponse
func (c *ClientWithResponses) PublishedDataRetrievalPOSTWithBodyWithResponse(ctx context.Context, pType PublishedDataRetrievalPOSTParamsType, format PublishedDataRetrievalPOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedDataRetrievalPOSTResponse, error) {
	rsp, err := c.PublishedDataRetrievalPOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataRetrievalPOSTResponse(rsp)
}

func (c *ClientWithResponses) PublishedDataRetrievalPOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedDataRetrievalPOSTParamsType, format PublishedDataRetrievalPOSTParamsFormat, body PublishedDataRetrievalPOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedDataRetrievalPOSTResponse, error) {
	rsp, err := c.PublishedDataRetrievalPOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataRetrievalPOSTResponse(rsp)
}

// PublishedClaimsRetrievalServicePOSTWithBodyWithResponse request with arbitrary body returning *PublishedClaimsRetrievalServicePOSTResponse
func (c *ClientWithResponses) PublishedClaimsRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedClaimsRetrievalServicePOSTParamsType, format PublishedClaimsRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedClaimsRetrievalServicePOSTResponse, error) {
	rsp, err := c.PublishedClaimsRetrievalServicePOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedClaimsRetrievalServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) PublishedClaimsRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedClaimsRetrievalServicePOSTParamsType, format PublishedClaimsRetrievalServicePOSTParamsFormat, body PublishedClaimsRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedClaimsRetrievalServicePOSTResponse, error) {
	rsp, err := c.PublishedClaimsRetrievalServicePOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedClaimsRetrievalServicePOSTResponse(rsp)
}

// PublishedDataDescriptionRetrievalServicePOSTWithBodyWithResponse request with arbitrary body returning *PublishedDataDescriptionRetrievalServicePOSTResponse
func (c *ClientWithResponses) PublishedDataDescriptionRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedDataDescriptionRetrievalServicePOSTParamsType, format PublishedDataDescriptionRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedDataDescriptionRetrievalServicePOSTResponse, error) {
	rsp, err := c.PublishedDataDescriptionRetrievalServicePOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataDescriptionRetrievalServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) PublishedDataDescriptionRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedDataDescriptionRetrievalServicePOSTParamsType, format PublishedDataDescriptionRetrievalServicePOSTParamsFormat, body PublishedDataDescriptionRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedDataDescriptionRetrievalServicePOSTResponse, error) {
	rsp, err := c.PublishedDataDescriptionRetrievalServicePOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataDescriptionRetrievalServicePOSTResponse(rsp)
}

// PublishedEquivalentsRetrievalServicePOSTWithBodyWithResponse request with arbitrary body returning *PublishedEquivalentsRetrievalServicePOSTResponse
func (c *ClientWithResponses) PublishedEquivalentsRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedEquivalentsRetrievalServicePOSTParamsType, format PublishedEquivalentsRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedEquivalentsRetrievalServicePOSTResponse, error) {
	rsp, err := c.PublishedEquivalentsRetrievalServicePOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedEquivalentsRetrievalServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) PublishedEquivalentsRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedEquivalentsRetrievalServicePOSTParamsType, format PublishedEquivalentsRetrievalServicePOSTParamsFormat, body PublishedEquivalentsRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedEquivalentsRetrievalServicePOSTResponse, error) {
	rsp, err := c.PublishedEquivalentsRetrievalServicePOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedEquivalentsRetrievalServicePOSTResponse(rsp)
}

// PublishedDataFullCycleServicePOSTWithBodyWithResponse request with arbitrary body returning *PublishedDataFullCycleServicePOSTResponse
func (c *ClientWithResponses) PublishedDataFullCycleServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedDataFullCycleServicePOSTParamsType, format PublishedDataFullCycleServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedDataFullCycleServicePOSTResponse, error) {
	rsp, err := c.PublishedDataFullCycleServicePOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataFullCycleServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) PublishedDataFullCycleServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedDataFullCycleServicePOSTParamsType, format PublishedDataFullCycleServicePOSTParamsFormat, body PublishedDataFullCycleServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedDataFullCycleServicePOSTResponse, error) {
	rsp, err := c.PublishedDataFullCycleServicePOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataFullCycleServicePOSTResponse(rsp)
}

// PublishedDataFulltextInquiryServicePOSTWithBodyWithResponse request with arbitrary body returning *PublishedDataFulltextInquiryServicePOSTResponse
func (c *ClientWithResponses) PublishedDataFulltextInquiryServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedDataFulltextInquiryServicePOSTParamsType, format PublishedDataFulltextInquiryServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedDataFulltextInquiryServicePOSTResponse, error) {
	rsp, err := c.PublishedDataFulltextInquiryServicePOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataFulltextInquiryServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) PublishedDataFulltextInquiryServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedDataFulltextInquiryServicePOSTParamsType, format PublishedDataFulltextInquiryServicePOSTParamsFormat, body PublishedDataFulltextInquiryServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedDataFulltextInquiryServicePOSTResponse, error) {
	rsp, err := c.PublishedDataFulltextInquiryServicePOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataFulltextInquiryServicePOSTResponse(rsp)
}

// PublishedImagesInquryServicePOSTWithBodyWithResponse request with arbitrary body returning *PublishedImagesInquryServicePOSTResponse
func (c *ClientWithResponses) PublishedImagesInquryServicePOSTWithBodyWithResponse(ctx context.Context, pType PublishedImagesInquryServicePOSTParamsType, format PublishedImagesInquryServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PublishedImagesInquryServicePOSTResponse, error) {
	rsp, err := c.PublishedImagesInquryServicePOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedImagesInquryServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) PublishedImagesInquryServicePOSTWithTextBodyWithResponse(ctx context.Context, pType PublishedImagesInquryServicePOSTParamsType, format PublishedImagesInquryServicePOSTParamsFormat, body PublishedImagesInquryServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*PublishedImagesInquryServicePOSTResponse, error) {
	rsp, err := c.PublishedImagesInquryServicePOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedImagesInquryServicePOSTResponse(rsp)
}

// PublishedDataAbstractServiceWithResponse request returning *PublishedDataAbstractServiceResponse
func (c *ClientWithResponses) PublishedDataAbstractServiceWithResponse(ctx context.Context, pType PublishedDataAbstractServiceParamsType, format PublishedDataAbstractServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedDataAbstractServiceResponse, error) {
	rsp, err := c.PublishedDataAbstractService(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataAbstractServiceResponse(rsp)
}

// PublishedDataRetrievalWithResponse request returning *PublishedDataRetrievalResponse
func (c *ClientWithResponses) PublishedDataRetrievalWithResponse(ctx context.Context, pType PublishedDataRetrievalParamsType, format PublishedDataRetrievalParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedDataRetrievalResponse, error) {
	rsp, err := c.PublishedDataRetrieval(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataRetrievalResponse(rsp)
}

// PublishedDataClaimsRetrievalServiceWithResponse request returning *PublishedDataClaimsRetrievalServiceResponse
func (c *ClientWithResponses) PublishedDataClaimsRetrievalServiceWithResponse(ctx context.Context, pType PublishedDataClaimsRetrievalServiceParamsType, format PublishedDataClaimsRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedDataClaimsRetrievalServiceResponse, error) {
	rsp, err := c.PublishedDataClaimsRetrievalService(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataClaimsRetrievalServiceResponse(rsp)
}

// PublishedDataDescriptionRetrievalServiceWithResponse request returning *PublishedDataDescriptionRetrievalServiceResponse
func (c *ClientWithResponses) PublishedDataDescriptionRetrievalServiceWithResponse(ctx context.Context, pType PublishedDataDescriptionRetrievalServiceParamsType, format PublishedDataDescriptionRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedDataDescriptionRetrievalServiceResponse, error) {
	rsp, err := c.PublishedDataDescriptionRetrievalService(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataDescriptionRetrievalServiceResponse(rsp)
}

// PublishedEquivalentsRetrievalServiceWithResponse request returning *PublishedEquivalentsRetrievalServiceResponse
func (c *ClientWithResponses) PublishedEquivalentsRetrievalServiceWithResponse(ctx context.Context, pType PublishedEquivalentsRetrievalServiceParamsType, format PublishedEquivalentsRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedEquivalentsRetrievalServiceResponse, error) {
	rsp, err := c.PublishedEquivalentsRetrievalService(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedEquivalentsRetrievalServiceResponse(rsp)
}

// PublishedDataFullCycleServiceWithResponse request returning *PublishedDataFullCycleServiceResponse
func (c *ClientWithResponses) PublishedDataFullCycleServiceWithResponse(ctx context.Context, pType PublishedDataFullCycleServiceParamsType, format PublishedDataFullCycleServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedDataFullCycleServiceResponse, error) {
	rsp, err := c.PublishedDataFullCycleService(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataFullCycleServiceResponse(rsp)
}

// PublishedDataFulltextInquiryServiceWithResponse request returning *PublishedDataFulltextInquiryServiceResponse
func (c *ClientWithResponses) PublishedDataFulltextInquiryServiceWithResponse(ctx context.Context, pType PublishedDataFulltextInquiryServiceParamsType, format PublishedDataFulltextInquiryServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedDataFulltextInquiryServiceResponse, error) {
	rsp, err := c.PublishedDataFulltextInquiryService(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedDataFulltextInquiryServiceResponse(rsp)
}

// PublishedImagesInquiryServiceWithResponse request returning *PublishedImagesInquiryServiceResponse
func (c *ClientWithResponses) PublishedImagesInquiryServiceWithResponse(ctx context.Context, pType PublishedImagesInquiryServiceParamsType, format PublishedImagesInquiryServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*PublishedImagesInquiryServiceResponse, error) {
	rsp, err := c.PublishedImagesInquiryService(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePublishedImagesInquiryServiceResponse(rsp)
}

// RegisterSearchServiceWithoutConstituentsWithResponse request returning *RegisterSearchServiceWithoutConstituentsResponse
func (c *ClientWithResponses) RegisterSearchServiceWithoutConstituentsWithResponse(ctx context.Context, params *RegisterSearchServiceWithoutConstituentsParams, reqEditors ...RequestEditorFn) (*RegisterSearchServiceWithoutConstituentsResponse, error) {
	rsp, err := c.RegisterSearchServiceWithoutConstituents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterSearchServiceWithoutConstituentsResponse(rsp)
}

// RegisterSearchServiceWithVariableConstituentsWithResponse request returning *RegisterSearchServiceWithVariableConstituentsResponse
func (c *ClientWithResponses) RegisterSearchServiceWithVariableConstituentsWithResponse(ctx context.Context, constituent RegisterSearchServiceWithVariableConstituentsParamsConstituent, params *RegisterSearchServiceWithVariableConstituentsParams, reqEditors ...RequestEditorFn) (*RegisterSearchServiceWithVariableConstituentsResponse, error) {
	rsp, err := c.RegisterSearchServiceWithVariableConstituents(ctx, constituent, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterSearchServiceWithVariableConstituentsResponse(rsp)
}

// RegisterRetrievalServicePOSTWithBodyWithResponse request with arbitrary body returning *RegisterRetrievalServicePOSTResponse
func (c *ClientWithResponses) RegisterRetrievalServicePOSTWithBodyWithResponse(ctx context.Context, pType RegisterRetrievalServicePOSTParamsType, format RegisterRetrievalServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterRetrievalServicePOSTResponse, error) {
	rsp, err := c.RegisterRetrievalServicePOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterRetrievalServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) RegisterRetrievalServicePOSTWithTextBodyWithResponse(ctx context.Context, pType RegisterRetrievalServicePOSTParamsType, format RegisterRetrievalServicePOSTParamsFormat, body RegisterRetrievalServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*RegisterRetrievalServicePOSTResponse, error) {
	rsp, err := c.RegisterRetrievalServicePOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterRetrievalServicePOSTResponse(rsp)
}

// RegisterEventsServicePOSTWithBodyWithResponse request with arbitrary body returning *RegisterEventsServicePOSTResponse
func (c *ClientWithResponses) RegisterEventsServicePOSTWithBodyWithResponse(ctx context.Context, pType RegisterEventsServicePOSTParamsType, format RegisterEventsServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterEventsServicePOSTResponse, error) {
	rsp, err := c.RegisterEventsServicePOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterEventsServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) RegisterEventsServicePOSTWithTextBodyWithResponse(ctx context.Context, pType RegisterEventsServicePOSTParamsType, format RegisterEventsServicePOSTParamsFormat, body RegisterEventsServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*RegisterEventsServicePOSTResponse, error) {
	rsp, err := c.RegisterEventsServicePOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterEventsServicePOSTResponse(rsp)
}

// RegisterProceduralStepsServicePOSTWithBodyWithResponse request with arbitrary body returning *RegisterProceduralStepsServicePOSTResponse
func (c *ClientWithResponses) RegisterProceduralStepsServicePOSTWithBodyWithResponse(ctx context.Context, pType RegisterProceduralStepsServicePOSTParamsType, format RegisterProceduralStepsServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterProceduralStepsServicePOSTResponse, error) {
	rsp, err := c.RegisterProceduralStepsServicePOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterProceduralStepsServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) RegisterProceduralStepsServicePOSTWithTextBodyWithResponse(ctx context.Context, pType RegisterProceduralStepsServicePOSTParamsType, format RegisterProceduralStepsServicePOSTParamsFormat, body RegisterProceduralStepsServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*RegisterProceduralStepsServicePOSTResponse, error) {
	rsp, err := c.RegisterProceduralStepsServicePOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterProceduralStepsServicePOSTResponse(rsp)
}

// RegisterUNIPServicePOSTWithBodyWithResponse request with arbitrary body returning *RegisterUNIPServicePOSTResponse
func (c *ClientWithResponses) RegisterUNIPServicePOSTWithBodyWithResponse(ctx context.Context, pType RegisterUNIPServicePOSTParamsType, format RegisterUNIPServicePOSTParamsFormat, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RegisterUNIPServicePOSTResponse, error) {
	rsp, err := c.RegisterUNIPServicePOSTWithBody(ctx, pType, format, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterUNIPServicePOSTResponse(rsp)
}

func (c *ClientWithResponses) RegisterUNIPServicePOSTWithTextBodyWithResponse(ctx context.Context, pType RegisterUNIPServicePOSTParamsType, format RegisterUNIPServicePOSTParamsFormat, body RegisterUNIPServicePOSTTextRequestBody, reqEditors ...RequestEditorFn) (*RegisterUNIPServicePOSTResponse, error) {
	rsp, err := c.RegisterUNIPServicePOSTWithTextBody(ctx, pType, format, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterUNIPServicePOSTResponse(rsp)
}

// RegisterRetrievalServiceWithResponse request returning *RegisterRetrievalServiceResponse
func (c *ClientWithResponses) RegisterRetrievalServiceWithResponse(ctx context.Context, pType RegisterRetrievalServiceParamsType, format RegisterRetrievalServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*RegisterRetrievalServiceResponse, error) {
	rsp, err := c.RegisterRetrievalService(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterRetrievalServiceResponse(rsp)
}

// RegisterEventsServiceWithResponse request returning *RegisterEventsServiceResponse
func (c *ClientWithResponses) RegisterEventsServiceWithResponse(ctx context.Context, pType RegisterEventsServiceParamsType, format RegisterEventsServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*RegisterEventsServiceResponse, error) {
	rsp, err := c.RegisterEventsService(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterEventsServiceResponse(rsp)
}

// RegisterProceduralStepsServiceWithResponse request returning *RegisterProceduralStepsServiceResponse
func (c *ClientWithResponses) RegisterProceduralStepsServiceWithResponse(ctx context.Context, pType RegisterProceduralStepsServiceParamsType, format RegisterProceduralStepsServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*RegisterProceduralStepsServiceResponse, error) {
	rsp, err := c.RegisterProceduralStepsService(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterProceduralStepsServiceResponse(rsp)
}

// RegisterUNIPServiceWithResponse request returning *RegisterUNIPServiceResponse
func (c *ClientWithResponses) RegisterUNIPServiceWithResponse(ctx context.Context, pType RegisterUNIPServiceParamsType, format RegisterUNIPServiceParamsFormat, number string, reqEditors ...RequestEditorFn) (*RegisterUNIPServiceResponse, error) {
	rsp, err := c.RegisterUNIPService(ctx, pType, format, number, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRegisterUNIPServiceResponse(rsp)
}

// ParseGetUsageStatisticsResponse parses an HTTP response from a GetUsageStatisticsWithResponse call
func ParseGetUsageStatisticsResponse(rsp *http.Response) (*GetUsageStatisticsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsageStatisticsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseClassificationSchemaServicePOSTResponse parses an HTTP response from a ClassificationSchemaServicePOSTWithResponse call
func ParseClassificationSchemaServicePOSTResponse(rsp *http.Response) (*ClassificationSchemaServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClassificationSchemaServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseClassificationMediaServiceResponse parses an HTTP response from a ClassificationMediaServiceWithResponse call
func ParseClassificationMediaServiceResponse(rsp *http.Response) (*ClassificationMediaServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClassificationMediaServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseClassificationStatisticsServiceResponse parses an HTTP response from a ClassificationStatisticsServiceWithResponse call
func ParseClassificationStatisticsServiceResponse(rsp *http.Response) (*ClassificationStatisticsServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClassificationStatisticsServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseClassificationSchemaServiceResponse parses an HTTP response from a ClassificationSchemaServiceWithResponse call
func ParseClassificationSchemaServiceResponse(rsp *http.Response) (*ClassificationSchemaServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClassificationSchemaServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseClassificationSchemaSubclassServiceResponse parses an HTTP response from a ClassificationSchemaSubclassServiceWithResponse call
func ParseClassificationSchemaSubclassServiceResponse(rsp *http.Response) (*ClassificationSchemaSubclassServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClassificationSchemaSubclassServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseClassificationMappingServiceResponse parses an HTTP response from a ClassificationMappingServiceWithResponse call
func ParseClassificationMappingServiceResponse(rsp *http.Response) (*ClassificationMappingServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ClassificationMappingServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseINPADOCFamilyRetrievalServicePOSTResponse parses an HTTP response from a INPADOCFamilyRetrievalServicePOSTWithResponse call
func ParseINPADOCFamilyRetrievalServicePOSTResponse(rsp *http.Response) (*INPADOCFamilyRetrievalServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &INPADOCFamilyRetrievalServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseINPADOCFamilyRetrievalServiceWithBiblioPOSTResponse parses an HTTP response from a INPADOCFamilyRetrievalServiceWithBiblioPOSTWithResponse call
func ParseINPADOCFamilyRetrievalServiceWithBiblioPOSTResponse(rsp *http.Response) (*INPADOCFamilyRetrievalServiceWithBiblioPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &INPADOCFamilyRetrievalServiceWithBiblioPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseINPADOCFamilyRetrievalServiceWithLegalPOSTResponse parses an HTTP response from a INPADOCFamilyRetrievalServiceWithLegalPOSTWithResponse call
func ParseINPADOCFamilyRetrievalServiceWithLegalPOSTResponse(rsp *http.Response) (*INPADOCFamilyRetrievalServiceWithLegalPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &INPADOCFamilyRetrievalServiceWithLegalPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseINPADOCFamilyRetrievalServiceResponse parses an HTTP response from a INPADOCFamilyRetrievalServiceWithResponse call
func ParseINPADOCFamilyRetrievalServiceResponse(rsp *http.Response) (*INPADOCFamilyRetrievalServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &INPADOCFamilyRetrievalServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseINPADOCFamilyRetrievalServiceWithBiblioResponse parses an HTTP response from a INPADOCFamilyRetrievalServiceWithBiblioWithResponse call
func ParseINPADOCFamilyRetrievalServiceWithBiblioResponse(rsp *http.Response) (*INPADOCFamilyRetrievalServiceWithBiblioResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &INPADOCFamilyRetrievalServiceWithBiblioResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseINPADOCFamilyRetrievalServiceWithLegalResponse parses an HTTP response from a INPADOCFamilyRetrievalServiceWithLegalWithResponse call
func ParseINPADOCFamilyRetrievalServiceWithLegalResponse(rsp *http.Response) (*INPADOCFamilyRetrievalServiceWithLegalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &INPADOCFamilyRetrievalServiceWithLegalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseLegalDataRetrievalServicePOSTResponse parses an HTTP response from a LegalDataRetrievalServicePOSTWithResponse call
func ParseLegalDataRetrievalServicePOSTResponse(rsp *http.Response) (*LegalDataRetrievalServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LegalDataRetrievalServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseLegalDataRetrievalServiceResponse parses an HTTP response from a LegalDataRetrievalServiceWithResponse call
func ParseLegalDataRetrievalServiceResponse(rsp *http.Response) (*LegalDataRetrievalServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LegalDataRetrievalServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseNumberServiceResponse parses an HTTP response from a NumberServiceWithResponse call
func ParseNumberServiceResponse(rsp *http.Response) (*NumberServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NumberServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseNumberServicePOSTResponse parses an HTTP response from a NumberServicePOSTWithResponse call
func ParseNumberServicePOSTResponse(rsp *http.Response) (*NumberServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &NumberServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedImagesRetrievalServicePOSTResponse parses an HTTP response from a PublishedImagesRetrievalServicePOSTWithResponse call
func ParsePublishedImagesRetrievalServicePOSTResponse(rsp *http.Response) (*PublishedImagesRetrievalServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedImagesRetrievalServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePublishedImagesRetrievalServiceResponse parses an HTTP response from a PublishedImagesRetrievalServiceWithResponse call
func ParsePublishedImagesRetrievalServiceResponse(rsp *http.Response) (*PublishedImagesRetrievalServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedImagesRetrievalServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePublishedDataKeywordsSearchWithoutConsituentsResponse parses an HTTP response from a PublishedDataKeywordsSearchWithoutConsituentsWithResponse call
func ParsePublishedDataKeywordsSearchWithoutConsituentsResponse(rsp *http.Response) (*PublishedDataKeywordsSearchWithoutConsituentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedDataKeywordsSearchWithoutConsituentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedDataKeywordsSearchWithVariableConstituentsResponse parses an HTTP response from a PublishedDataKeywordsSearchWithVariableConstituentsWithResponse call
func ParsePublishedDataKeywordsSearchWithVariableConstituentsResponse(rsp *http.Response) (*PublishedDataKeywordsSearchWithVariableConstituentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedDataKeywordsSearchWithVariableConstituentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedDataAbstractServicePOSTResponse parses an HTTP response from a PublishedDataAbstractServicePOSTWithResponse call
func ParsePublishedDataAbstractServicePOSTResponse(rsp *http.Response) (*PublishedDataAbstractServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedDataAbstractServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedDataRetrievalPOSTResponse parses an HTTP response from a PublishedDataRetrievalPOSTWithResponse call
func ParsePublishedDataRetrievalPOSTResponse(rsp *http.Response) (*PublishedDataRetrievalPOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedDataRetrievalPOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedClaimsRetrievalServicePOSTResponse parses an HTTP response from a PublishedClaimsRetrievalServicePOSTWithResponse call
func ParsePublishedClaimsRetrievalServicePOSTResponse(rsp *http.Response) (*PublishedClaimsRetrievalServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedClaimsRetrievalServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedDataDescriptionRetrievalServicePOSTResponse parses an HTTP response from a PublishedDataDescriptionRetrievalServicePOSTWithResponse call
func ParsePublishedDataDescriptionRetrievalServicePOSTResponse(rsp *http.Response) (*PublishedDataDescriptionRetrievalServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedDataDescriptionRetrievalServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedEquivalentsRetrievalServicePOSTResponse parses an HTTP response from a PublishedEquivalentsRetrievalServicePOSTWithResponse call
func ParsePublishedEquivalentsRetrievalServicePOSTResponse(rsp *http.Response) (*PublishedEquivalentsRetrievalServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedEquivalentsRetrievalServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedDataFullCycleServicePOSTResponse parses an HTTP response from a PublishedDataFullCycleServicePOSTWithResponse call
func ParsePublishedDataFullCycleServicePOSTResponse(rsp *http.Response) (*PublishedDataFullCycleServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedDataFullCycleServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedDataFulltextInquiryServicePOSTResponse parses an HTTP response from a PublishedDataFulltextInquiryServicePOSTWithResponse call
func ParsePublishedDataFulltextInquiryServicePOSTResponse(rsp *http.Response) (*PublishedDataFulltextInquiryServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedDataFulltextInquiryServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedImagesInquryServicePOSTResponse parses an HTTP response from a PublishedImagesInquryServicePOSTWithResponse call
func ParsePublishedImagesInquryServicePOSTResponse(rsp *http.Response) (*PublishedImagesInquryServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedImagesInquryServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedDataAbstractServiceResponse parses an HTTP response from a PublishedDataAbstractServiceWithResponse call
func ParsePublishedDataAbstractServiceResponse(rsp *http.Response) (*PublishedDataAbstractServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedDataAbstractServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedDataRetrievalResponse parses an HTTP response from a PublishedDataRetrievalWithResponse call
func ParsePublishedDataRetrievalResponse(rsp *http.Response) (*PublishedDataRetrievalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedDataRetrievalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedDataClaimsRetrievalServiceResponse parses an HTTP response from a PublishedDataClaimsRetrievalServiceWithResponse call
func ParsePublishedDataClaimsRetrievalServiceResponse(rsp *http.Response) (*PublishedDataClaimsRetrievalServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedDataClaimsRetrievalServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedDataDescriptionRetrievalServiceResponse parses an HTTP response from a PublishedDataDescriptionRetrievalServiceWithResponse call
func ParsePublishedDataDescriptionRetrievalServiceResponse(rsp *http.Response) (*PublishedDataDescriptionRetrievalServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedDataDescriptionRetrievalServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedEquivalentsRetrievalServiceResponse parses an HTTP response from a PublishedEquivalentsRetrievalServiceWithResponse call
func ParsePublishedEquivalentsRetrievalServiceResponse(rsp *http.Response) (*PublishedEquivalentsRetrievalServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedEquivalentsRetrievalServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedDataFullCycleServiceResponse parses an HTTP response from a PublishedDataFullCycleServiceWithResponse call
func ParsePublishedDataFullCycleServiceResponse(rsp *http.Response) (*PublishedDataFullCycleServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedDataFullCycleServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedDataFulltextInquiryServiceResponse parses an HTTP response from a PublishedDataFulltextInquiryServiceWithResponse call
func ParsePublishedDataFulltextInquiryServiceResponse(rsp *http.Response) (*PublishedDataFulltextInquiryServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedDataFulltextInquiryServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParsePublishedImagesInquiryServiceResponse parses an HTTP response from a PublishedImagesInquiryServiceWithResponse call
func ParsePublishedImagesInquiryServiceResponse(rsp *http.Response) (*PublishedImagesInquiryServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PublishedImagesInquiryServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseRegisterSearchServiceWithoutConstituentsResponse parses an HTTP response from a RegisterSearchServiceWithoutConstituentsWithResponse call
func ParseRegisterSearchServiceWithoutConstituentsResponse(rsp *http.Response) (*RegisterSearchServiceWithoutConstituentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterSearchServiceWithoutConstituentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseRegisterSearchServiceWithVariableConstituentsResponse parses an HTTP response from a RegisterSearchServiceWithVariableConstituentsWithResponse call
func ParseRegisterSearchServiceWithVariableConstituentsResponse(rsp *http.Response) (*RegisterSearchServiceWithVariableConstituentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterSearchServiceWithVariableConstituentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseRegisterRetrievalServicePOSTResponse parses an HTTP response from a RegisterRetrievalServicePOSTWithResponse call
func ParseRegisterRetrievalServicePOSTResponse(rsp *http.Response) (*RegisterRetrievalServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterRetrievalServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseRegisterEventsServicePOSTResponse parses an HTTP response from a RegisterEventsServicePOSTWithResponse call
func ParseRegisterEventsServicePOSTResponse(rsp *http.Response) (*RegisterEventsServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterEventsServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseRegisterProceduralStepsServicePOSTResponse parses an HTTP response from a RegisterProceduralStepsServicePOSTWithResponse call
func ParseRegisterProceduralStepsServicePOSTResponse(rsp *http.Response) (*RegisterProceduralStepsServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterProceduralStepsServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseRegisterUNIPServicePOSTResponse parses an HTTP response from a RegisterUNIPServicePOSTWithResponse call
func ParseRegisterUNIPServicePOSTResponse(rsp *http.Response) (*RegisterUNIPServicePOSTResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterUNIPServicePOSTResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseRegisterRetrievalServiceResponse parses an HTTP response from a RegisterRetrievalServiceWithResponse call
func ParseRegisterRetrievalServiceResponse(rsp *http.Response) (*RegisterRetrievalServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterRetrievalServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseRegisterEventsServiceResponse parses an HTTP response from a RegisterEventsServiceWithResponse call
func ParseRegisterEventsServiceResponse(rsp *http.Response) (*RegisterEventsServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterEventsServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseRegisterProceduralStepsServiceResponse parses an HTTP response from a RegisterProceduralStepsServiceWithResponse call
func ParseRegisterProceduralStepsServiceResponse(rsp *http.Response) (*RegisterProceduralStepsServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterProceduralStepsServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}

// ParseRegisterUNIPServiceResponse parses an HTTP response from a RegisterUNIPServiceWithResponse call
func ParseRegisterUNIPServiceResponse(rsp *http.Response) (*RegisterUNIPServiceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RegisterUNIPServiceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest string
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && true:
		var dest Error
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XMLDefault = &dest

	case rsp.StatusCode == 200:
	// Content-type (application/javascript) unsupported

	case true:
		// Content-type (application/javascript) unsupported

	}

	return response, nil
}
